{"version":"1.1257","conference":{"title":"Qt World Summit 2017","start":"2017-10-10","end":"2017-10-12","days":{"2017-10-10":{"index":0,"date":"2017-10-10","rooms":{"Room B05":[{"id":3846,"start":"10:00","duration":"07:00","room":"Room B05","slug":"introduction-to-qtqml","title":"Introduction to Qt/QML","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Developers and managers interested in learning the anatomy of a QML applicationPrerequisite: Knowing the basics of Qt at C++ level is an advantage but not a requirement\r\n\r\nThis training is an introduction to Qt Quick. On the one hand, it will teach you how to compose fluid user interfaces with slick animations using the QML language. On the other hand, it will teach you how you hook the QML side up to your business logic in C++.\r\n\r\nCourse contents:\r\n\r\nConnecting a QML UX with C++ business logic\r\nComplex list views including data provided from C++ models\r\nCustom objects implemented using Qt Quick scene graph\r\nProfiling and best practices for optimal performance\r\n\r\nWhy learn Qt/QML?\r\n\r\nDesigned to take people new to Qt or QML, from the basics to a deep functional understanding of best practices, this Qt/QML training will equip you with the skills and know-how to boost your productivity at work.","persons":[{"id":3839,"full_public_name":"Jesper Pedersen","first_name":"Jesper","last_name":"Pedersen"}],"links":[]}],"Room B07":[{"id":3847,"start":"10:00","duration":"07:00","room":"Room B07","slug":"3847","title":"Introduction to Multithreading with Qt","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Qt Developers interested in multithreaded development.\r\n\r\nPrerequisite: Existing Qt knowledge. Basic understanding of multithreaded programming is also an advantage.\r\n\r\nWith more and more cores in computers, multithreaded programming is becoming increasingly important for developers.\r\n\r\nQt offers several mechanisms for multithreading, however, it is up to you to decide which to use when so that you steer clear of common pitfalls. This course offers guidance on how to choose.\r\n\r\nWhy learn about Multithreading with Qt?\r\n\r\nThis training will introduce you to multithreading concepts in general, tell you about the different mechanism in Qt, and discuss best practices and common pitfalls.","persons":[{"id":3576,"full_public_name":"Marc Mutz","first_name":"Marc","last_name":"Mutz"}],"links":[]}],"Room B09":[{"id":3848,"start":"10:00","duration":"07:00","room":"Room B09","slug":"introduction-modelview-programming-qt","title":"Introduction to Model/View Programming with Qt","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Qt developers interested in model/view either from QML or from Qt Widgets.\r\n\r\nPrerequisite: Existing Qt knowledge. A key ingredient in successful software development is the separation of presentation and business logic. Everyone knows that.  A larger part of most applications is a list of things, and for those, Qt offers such separation using a model/view framework.\r\n\r\nThis presentation will introduce this framework and tell you how to develop models independent of whether they are to be displayed in a C++/Qt application or in a Qt Quick application.\r\n\r\nThe training dives into subjects such as:\r\n\r\n \tThe API to implement for use in a 1-dimensional list, a 2-dimensional table and a tree view\r\n \tWhat model indexes are all about\r\n \tHow to successfully implement a proxy model\r\n \tHow to debug your models\r\n \tHow to implement models in C++ that are displayed in Qt Quick\r\n\r\nWhy learn Model/View Programming?\r\n\r\nModel/View Programming teaches efficient displaying and manipulation of data sets of unknown sizes and independent of data source. It allows applications to work with hundreds of thousands of records, from in-memory data, databases or servers.","persons":[{"id":3836,"full_public_name":"Tobias Koenig","first_name":"Tobias","last_name":"Koenig"}],"links":[]}],"Room A05":[{"id":3849,"start":"10:00","duration":"07:00","room":"Room A05","slug":"introduction-qt-mobile-platforms-androidios","title":"Introduction to Qt for Mobile Platforms – Android/iOS","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Anyone interested in the process of developing with Qt for mobile platforms\r\n\r\nPrerequisite: Basic Qt knowledge is beneficial. This presentation will introduce the tools and processes needed to develop with Qt for mobile devices, including Android and iOS.\r\n\r\nYou will learn about:\r\n\r\n \tInstalling and setting up Qt for Android\r\n \tInstalling and setting up Qt for iOS\r\n \tUse case: Targeting desktop and mobile devices using Qt\r\n \tDevice independent development - how do you cope with devices of vastly different resolutions and screen density\r\n \tPlatform integration - how to access native services and toolkits, the easy way\r\n\r\nWhy learn Qt for Mobile Platforms?\r\n\r\nQt provides the unique opportunity to leverage toolkits and team experience across all major desktop and mobile platforms. Learn what makes Qt ideal for building common applications on mobile devices.","persons":[{"id":2958,"full_public_name":"Mike Krus","first_name":"Mike","last_name":"Krus"}],"links":[]}],"Room A03":[{"id":3850,"start":"10:00","duration":"07:00","room":"Room A03","slug":"introduction-qt-3d","title":"Introduction to Qt 3D","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Developers or Managers wishing to get an idea of what Qt 3D is about and learn how to make some attractive applications with 3D content in the process.\r\n\r\nPrerequisite: A basic understanding of QML would be useful. No prior OpenGL or 3D experience is required.\r\n\r\nQt 5.7 introduced the powerful new Qt 3D module that can be used to integrate 3D content into your Qt applications using C++ or QML. In fact, Qt 3D provides an extensible framework for soft realtime simulations, of which rendering is just one aspect. This 1 day training will introduce you to Qt 3D's features and APIs, show what you can achieve with them, and how Qt 3D can be extended by the user and by the Qt 3D authors in the future.\r\n\r\nAlong the way we will introduce the Qt 3D renderer and input systems and how they are built on top of a flexible, highly threaded, Entity Component System (ECS) architecture that scales very well and is ripe for future additions. You will learn:\r\n\r\n \tHow to construct a basic Qt 3D application\r\n \tAbout Transform hierarchies and Entities and Components ot make a scene graph\r\n \tHow to display 3D graphical content using geometry, materials, textures\r\n \tHow Qt 3D maps onto the graphics pipeline\r\n \tHow to extend Qt 3D to use your own custom geometry\r\n \tHow to write custom materials and shaders\r\n \tHow to completely control the Qt 3D renderer dynamically at runtime using the Frame Graph\r\n \tHow to integrate Qt 3D with Qt Quick to provide a 2D user interface\r\n \tHow to handle advanced input with Qt 3D\r\n \tFuture plans for Qt 3D and how to extend it yourself\r\n\r\nWhy learn Qt 3D?\r\n\r\nIntegrating 3D content in applications is becoming a clear trend in many fields and is likely to become even more important in the future with the growth of Virtual Reality and Augmented Reality. Qt has always allowed you to integrate with OpenGL fairly easily, but managing the rendering code itself was still a very challenging task, often limited to a few specialized team members. With Qt 3D, you can bypass that challenge as the heavy lifting has already been done.","persons":[{"id":2954,"full_public_name":"Dr Sean Harmer","first_name":"Dr Sean","last_name":"Harmer"}],"links":[]}],"Room A06":[{"id":3851,"start":"10:00","duration":"07:00","room":"Room A06","slug":"introduction-modern-opengl","title":"Introduction to Modern OpenGL","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Developers interested in learning the basics of OpenGL.\r\n\r\nPrerequisite: A basic level of linear algebra will be assumed for this course (multiplying a matrix and a vector). Mathematics will be kept to a bare minimum so as not to get in the way of eye candy!\r\n\r\nOpenGL is a central part of QtQuick2 in Qt 5 and plays a key role in displaying the main content of many widget-based applications.\r\n\r\nOpenGL has been around for many years and in recent times has evolved to shed much of its legacy baggage and better expose the underlying hardware. Modern OpenGL allows us to take full advantage of the enormous power and parallel processing power of today’s GPUs. Maximizing performance of OpenGL rendering requires us to understand how GPUs work and how to efficiently feed them with data.\r\n\r\nQt provides a number of classes to make life easier when working with modern OpenGL. This training will show you how to do the basic tasks associated with OpenGL rendering and will go on to show how to use Qt and OpenGL to achieve several rendering effects and algorithms. You will also learn how to write custom QtQuick2 items using the OpenGL and scene graph APIs.\r\n\r\nWhy learn Modern OpenGL?\r\n\r\nOpenGL is the industry standard for high performance graphics and computation on desktop, mobile and embedded platforms. Whether the requirement is visualizing large data sets, creating engaging user interfaces or breathtaking real-time visuals, getting the topics covered in this course is essential.","persons":[{"id":3562,"full_public_name":"Paul Lemire","first_name":"Paul","last_name":"Lemire"}],"links":[]}],"Room A04":[{"id":3852,"start":"10:00","duration":"07:00","room":"Room A04","slug":"introduction-profiling-debugging-qt-development-linux","title":"Introduction to Profiling and Debugging for Qt Development on Linux","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target audience: Developers who want to find and fix problems.\r\n\r\nPrerequisite: Knowing the basics of C++, Qt and QML This training introduces various tools which help developers and testers in finding bugs and performance issues. This variant of the training focuses on Linux.\r\n\r\nThe tools presented cover a wide range of problems, from general purpose debugging and CPU profiling to Qt specific high-level analyzers. Often, it is relatively simple to run a tool, but interpreting the results, or even just using some of the more advanced tools, requires deep technical knowledge.\r\n\r\nThe following tools will be covered:\r\n\r\nDebugging\r\n\r\n \tGeneral purpose debuggers: GDB\r\n \tMemory error detectors: AddressSanitizer\r\n \tVarious Qt built-in features\r\n \tQML debugger\r\n \tGammaRay to investigate internals of Qt Applications\r\n\r\nProfiling\r\n\r\n \tCPU: Linux perf\r\n \tHeap memory: heaptrack\r\n \tQML profiler\r\n\r\nTesting\r\n\r\n \tStatic code analysis: clazy\r\n\r\nWhy learn about Debugging and Profiling?\r\n\r\nThe time spent writing code is often dwarfed by the time required to find bugs and improve performance. This training makes your development workflow more efficient. You will learn what tool to use in which situation, how to set it up and run it on an application as well as how to analyze and interpret the results.","persons":[{"id":3840,"full_public_name":"Thomas McGuire","first_name":"Thomas","last_name":"McGuire"}],"links":[]}],"Room B04":[{"id":3853,"start":"10:00","duration":"07:00","room":"Room B04","slug":"introduction-to-cmake","title":"Introduction to CMake","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: C and C++ Developers\r\n\r\nPrerequisite: Experience with build systems\r\n\r\nThe best thing a build system can do is not get into the way.\r\n\r\nCMake is the de facto standard build system for C and C++ outside of frameworks that require their own. It has earned this place by supporting the situations and special cases that arise in real projects.\r\n\r\nCMake even has strong support for building Qt applications, and it's a good alternative if you hit limitations in qmake.\r\n\r\nThis course will teach the basics of creating and building projects with CMake. In recent years, CMake has introduced some cleaner and more precise constructs. The course will focus on the new constructs where possible.\r\n\r\nWhy learn CMake?\r\n\r\nCMake has broad functionality that covers many real-world problems. Learning CMake enables you to solve advanced build requirements. This includes cross-platform builds, feature detection based on platform or available libraries, build-time configurable feature switches and custom build steps.","persons":[{"id":3841,"full_public_name":"David Faure","first_name":"David","last_name":"Faure"}],"links":[]}],"Room C03":[{"id":3854,"start":"10:00","duration":"07:00","room":"Room C03","slug":"introduction-testing-qt-gui-applications-squish","title":"Introduction to Testing Qt GUI Applications with Squish","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: Testers, Developers and Managers interested in how to automate testing of Qt applications\r\n\r\nPrerequisite: Basic scripting skills and knowing the basics of Qt are a benefit for this training. Bring your laptop and request a free evaluation license and download in advance through http://www.froglogic.com/squish/evaluate.php\r\n\r\nWhile unit testing is established to test components, integration and system tests verify that the overall system works as expected. Squish is the tool for automating these blackbox tests in the world of Qt.\r\n\r\nThe presenter will introduce you to the automated functional testing of user interfaces based on Qt. Besides getting to know the record and playback GUI testing tool Squish, additional topics range from best practices for test design over test refactoring to Behaviour Driven Testing.\r\n\r\nThis training includes theoretical modules and live demonstrations, but you are invited to join working on practical exercises - bring your laptop to participate.\r\n\r\nWhy learn about Squish GUI Tester?\r\n\r\nManual testing of user interfaces in applications is often a very complex and error-prone activity. Squish is a proven GUI test automation tool for functional GUI regression tests. Companies in all types of industries, including KDAB, use Squish to reduce the time spent on GUI testing software releases while increasing the quality of their applications.","persons":[{"id":3842,"full_public_name":"Tomasz Pawlowski","first_name":"Tomasz","last_name":"Pawlowski"}],"links":[]}],"Room B96":[{"id":3855,"start":"10:00","duration":"07:00","room":"Room B96","slug":"user-experience-design-embedded-devices-ics","title":"User Experience Design for Embedded Devices by ICS","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"This course is presented by ICSUser Experience Design for Embedded Devices The proliferation of tablets and smartphones has raised customers’ expectations of anticipated interaction with any device. If any system with a touchscreen is not as responsive a tablet, users are immediately disappointed.\r\n\r\nEvery year, the bar is set higher and it is important to recognize that compared to desktop systems, users of these new touch-enabled devices have different goals and expectations.\r\n\r\nThis full-day session for software developers will cover valuable User Experience (UX) concepts and techniques to consider before engaging in core development of an embedded systems application.\r\n\r\nWe will present various scenarios and UX best practices, discuss User Interface (UI) prototyping and testing strategies, examine case studies and work through a design problem.","persons":[{"id":3692,"full_public_name":"Jeff LeBlanc","first_name":"Jeff","last_name":"LeBlanc"}],"links":[]}],"Room C01":[{"id":3856,"start":"10:00","duration":"07:00","room":"Room C01","slug":"advanced-qml","title":"Advanced QML","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target audience: Experienced QML developers targeting embedded and/or mobile platforms.\r\n\r\nPrerequisite: A functional knowledge of QML is needed. Developers with more than one year of Qt/QML experience will also benefit from this course which is regularly updated.\r\n\r\nThis course is designed to take programmers who already know QML to a deeper level of functional understanding.\r\n\r\nCourse Contents\r\n\r\n \tAdvanced integration of QML, JavaScript and C++\r\n \tUsing OpenGL in custom QML elements\r\n \tAnalyzing and profiling the Qt Quick scene graph\r\n \tUnderstanding and removing bottlenecks that affect a QML UI\r\n \tBest practices for achieving optimal performances, even on constrained hardware resources\r\n\r\nWhy learn Advanced QML?\r\n\r\nThis course introduces cutting edge QML skills and know-how to boost your productivity at work. It provides understanding of what the QML engine does, showing how advanced standard features are implemented and teaching how to implement similar ones yourself.","persons":[{"id":3844,"full_public_name":"James Turner","first_name":"James","last_name":"Turner"}],"links":[]}],"Room B95":[{"id":3857,"start":"10:00","duration":"07:00","room":"Room B95","slug":"advanced-modern-opengl","title":"Advanced Modern OpenGL","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target audience: Developers wanting to understand realistic advanced visuals and improve pipeline and performance.\r\n\r\nPrerequisite: Developers already working with OpenGL, comfortable with the basics of specifying geometry, writing basic shaders and working with image data.\r\n\r\nThis training explores the implementation of many different rendering techniques to achieve cutting-edge visuals in OpenGL applications.\r\n\r\nIt also explores strategies to increase the performance of new and existing OpenGL code, with multi-pass rendering and use of uniform buffers, shader storage buffers and indirect drawing to reduce driver overhead.\r\n\r\nWhy learn Advanced OpenGL?\r\n\r\nIn this course, we introduce some of the most widely used and generally applicable rendering techniques, as well as explaining the costs of different graphic operations to get the best from available hardware resources. You will learn how to effectively increase your hardware performance with OpenGL.","persons":[{"id":2965,"full_public_name":"Giuseppe D'Angelo","first_name":"Giuseppe","last_name":"D'Angelo"}],"links":[]}],"Room A08":[{"id":3858,"start":"10:00","duration":"07:00","room":"Room A08","slug":"whats-new-c14-c17","title":"What's new in C++14 and C++17?","subtitle":"","tracks":["Training"],"track":"","type":"","language":"","abstract":"","description":"Target Audience: C++ developers who want to know more about the new features introduced in C++14 and C++17.\r\n\r\nPrerequisite: Knowing the basics of C++11 is a requirement, though more advanced topics will be explained as needed.\r\n\r\nStarting with C++11 released in 2011, the C++ language and standard library have steadily evolved. At the end of this year, the new C++17 standard, already supported by major compilers, is going to be released, adding a sizable amount of useful new features.\r\n\r\nIn this training, the most useful of the new features introduced in C++17 and its predecessor, C++14, will be presented. In cases for which these features depend on features introduced in C++11, these will be refreshed as well.\r\n\r\nNew library features being presented include the new types std::any, std::optional and std::variant, the new parallel algorithms and std::string_view. The new language features range from ways to improve template code with fold expressions, constexpr if and class template deduction over improvements of lambdas to structured bindings and initalizers in if and switch statements.\r\n\r\nWhy learn what's new in C++14 and C++17?\r\n\r\nC++ is the language that powers most applications written with Qt. To make the most out of the language, developers need to know its capabilities and pitfalls, and keep up with the incremental changes done in new releases. Doing so rewards them with ways to write easier, faster, cleaner and safer code","persons":[{"id":3845,"full_public_name":"Nicolas Arnaud-Cormos","first_name":"Nicolas","last_name":"Arnaud-Cormos"}],"links":[]}]}},"2017-10-11":{"index":1,"date":"2017-10-11","rooms":{"Room A03":[{"id":2975,"start":"16:25","duration":"00:25","room":"Room A03","slug":"qt-and-mqtt","title":"Qt and MQTT","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"MQTT describes the defacto standard protocol for publish and subscribe mechanism in the IoT world. The presenter will show how to integrate MQTT into Qt and create powerful devices reporting telemetry data either to the edge or into the cloud.","persons":[{"id":2934,"full_public_name":"Maurice Kalinowski","first_name":"Maurice","last_name":"Kalinowski"}],"links":[]},{"id":2981,"start":"14:30","duration":"00:25","room":"Room A03","slug":"chargepoint-ev-charging-one-ui-rule-unified-ui-future-past-products","title":"ChargePoint EV Charging: One UI to Rule Them All (Unified UI for Future and Past Products)","subtitle":"","tracks":["Automation","Automotive"],"track":"","type":"","language":"","abstract":"","description":"ChargePoint operates the world’s largest Electric Vehicle charging network. Based in Campbell, California, USA, ChargePoint has pushed the envelop in Fast Charging by creating a Level-3 DC Fast Charger capable of charging an Electric Vehicle in minutes by providing up to half a MegaWatt of power.\r\n\r\nChargePoint selected Qt to solve the problem of supporting both its newest products, as well as the ~35 thousand currently installed charging spots. Utilizing Qt5's QtQuick we were able to create a smooth, clean, flexible UI to run on both our current generation of Level-2 Chargers, as well as on our newest Level-3 DC Fast Chargers.\r\n\r\nOur goal is to support all of our UIs across all of our platforms with one flexible Qt UI. Our Qt UI can be configured to provide either touch interface with onscreen buttons or removing those touchscreen buttons in lieu of hardware buttons present on some of our current stations. Our stations have multiple resolutions, such as 640x480 and 1024x768. We provide the ability for the user to change the station display to their language of choice.\r\n\r\nWe utilize one UI codebase, one UI application, to support the various hardware configurations of a charging station to meet the needs of the station owner, such as: single port station, dual port station, Level-2 charging, Level-3 charging, Bus Depot charging, and even technical data displays to help in EV Labs or automotive shops.\r\n\r\nChargePoint's latest product, the Level-3 DC Express Plus, utilizes quad-core Arm processors and GPU acceleration to provide large fluid touchscreen experiences with beautiful animations, transitions and HD videos.\r\n\r\nTo support our previous products, ChargePoint has ported Qt5's QtQuick to a processor from 2009, an armv5 with 128MB of ram, while maintaining newer features such as full-screen h264 video playback, smooth eye-catching animations such as the ChargePoint’s EV Skyline Drive, and multilanguage support, by making careful use of Qt’s excellent software renderer, the DirectFB backend for graphics and the GStreamer backend for multimedia.","persons":[{"id":2941,"full_public_name":"Matthew Hungerford","first_name":"Matthew","last_name":"Hungerford"}],"links":[]},{"id":3012,"start":"14:55","duration":"00:25","room":"Room A03","slug":"modbus-with-qt","title":"Modbus with Qt","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"While old, the modbus standard is very alive and kicking. Today you can still buy newly designed PLCs and frequency inverters with a modbus interface on top of RS-485, RS-422 or RS-232 as the primary, and sometimes only, interface. Attendees to this talk will get an overview of the modbus history, usage and standard. Different cabling topologies will be discussed and advantages and disadvantages of different physical layers are discussed. Attendees will get a demonstration of how to access modbus compliant devices, both ethernet and serial devices, using Qt’s classes. Examples on how to implement both masters and slaves for modbus using Qt will also be given.\r\nWhen leaving this talk, attendees will have gained an overview of how the Modbus part of Qt works and will be able to go home and interface directly to existing hardware as well as creating new modbus slaves.\r\nAnd yes, there will be hardware, cables and flashing lights.","persons":[{"id":2964,"full_public_name":"Morten Winkler Jørgensen","first_name":"Morten Winkler","last_name":"Jørgensen"}],"links":[]},{"id":3580,"start":"13:30","duration":"00:25","room":"Room A03","slug":"qt-for-automation","title":"Qt for Automation","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Lars will talk about the Qt for Automation offering which has been announce in August 2017. The Qt for Automation offering addresses a certain market segment and wants to help to turn multi-dimensional scalability challenges in that market into new opportunities for automation customers. This includes new modules like MQTT or KNX but also new business and service offerings. Beyond this Lars will talk about the future of the Qt for Automation offering.\r\n\r\n&nbsp;","persons":[{"id":3579,"full_public_name":"Lars König","first_name":"Lars","last_name":"König"}],"links":[]},{"id":3764,"start":"16:00","duration":"00:25","room":"Room A03","slug":"lpwan-will-make-iot-revolution-real","title":"LPWAN Will Make the IoT Revolution Real!","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"IoT devices have been around since a long time, but the multi-billion promise market explosion will really happen because we now have LPWAN networks.\r\n\r\nWe will go through a brief overview of the major technologies which are currently available:\r\n\r\n \tLoRa / LoRaWAN\r\n \tSigFox\r\n \tNBIoT and its siblings ( LTE CATM1/NB1)\r\n\r\nAnd a new promising one:\r\n\r\n \tWeightless-P\r\n\r\nThe presentation will highlight pros/cons of every technology. Showing how these technology will jumpstart the IoT market: Ultra Long Range ( > 5 KM ) and Ultra Low Power consumption ( battery duration counted in years ), will really make possible what wasn’t achievable just a couple of years ago.\r\n\r\nWe will try to anticipate the trend showing similarities with the Internet Explosion of the late 90’s, and trying to identify similar patterns and identify which markets will be affected first.\r\n\r\nInitial phase HW Deployment – need sensors on the field\r\nSecond phase will be the BigData and/or machine learning with all the data that has been collected.","persons":[{"id":3762,"full_public_name":"Massimo Santoli","first_name":"Massimo","last_name":"Santoli"}],"links":[]},{"id":3893,"start":"13:55","duration":"00:25","room":"Room A03","slug":"intro-to-the-webos-qtwayland-compositor","title":"Intro to the WebOS QtWayland Compositor","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"A brief tour of the anatomy of the WebOS compositor. Using QtWayland and QtDeclarative, we give an overview of how Qt helped to ship Wayland with our acclaimed UI to a range of devices and formfactors.","persons":[{"id":3890,"full_public_name":"Florian Hänel","first_name":"Florian","last_name":"Hänel"}],"links":[]}],"Room A08":[{"id":2978,"start":"16:00","duration":"00:50","room":"Room A08","slug":"pointer-handlers-fluid-applications-qt-quick","title":"Pointer Handlers for Fluid Applications in Qt Quick","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"Over the last few years we have discussed adding a new way in QtQuick to handle events from pointing devices such as touchscreens, mice and graphics tablets. Now it is on track to ship in 5.10. This is an update and demo of the current status. A PointerHandler is a lightweight C++ object which handles pointing device events on behalf of a parent Item, in order to implement a specific gesture. So far we include implementations of TapHandler (which detects taps, clicks and long-presses, from any device, or from a specific device); DragHandler, which drags its parent Item, or an alternate target; and PinchHandler, which handles two or more touch points to scale, rotate and drag its parent Item or alternate target. Other handlers are coming; and in the future, we intend to have public C++ API for implementing your own.","persons":[{"id":2937,"full_public_name":"Shawn Rutledge","first_name":"Shawn","last_name":"Rutledge"}],"links":[]},{"id":3013,"start":"14:30","duration":"00:50","room":"Room A08","slug":"multithreading-with-qt","title":"Multithreading with Qt","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"Cross-platform thread support was introduced in Qt 2.2, released in 2000, ages before it finally got standardized by C++11. This support has allowed developers using Qt to succesfully build countless multithreaded applications, running natively on many operating systems: Windows, Linux, OS X, QNX, iO S, Android, and so on.\r\nAcross the span of four major versions Qt's threading facilities have been greatly expanded and improved. Following Qt's evolution across the years, a number of \"design patterns\" have emerged, in order to allow developers to use these facilities to the maximum extent, and not fall into any of the countless traps of multithreaded programming.\r\nIn this talk I will discuss the basics of thread support in Qt, starting from QThread, the central class in Qt that manages a thread. I will then focus on the interactions between QObjects, QThreads and thread-local event loops, and how all of this plays a role into the cross-thread signals and slots. The most common pitfalls will be analyzed and discussed here.\r\nI will then show how to \"mix and match\" Qt and C++11/14 threading and synchronization primitives, and what degree of support one can expect when moving away from Qt's constructs in favour of the standard C++ ones.","persons":[{"id":2965,"full_public_name":"Giuseppe D'Angelo","first_name":"Giuseppe","last_name":"D'Angelo"}],"links":[]},{"id":3577,"start":"13:30","duration":"00:50","room":"Room A08","slug":"qstringviews-qstringviews-everywhere","title":"QStringViews, QStringViews Everywhere","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"The upcoming Qt 5.10 release will see the biggest revolution in Qt string handling since Qt 2 added support for Unicode strings: QStringView. Deceptively simple, string views are a powerful abstraction of Unicode string data from the owning container. String views will permeate all of Qt's APIs within the next few releases and into Qt 6, and release the developer from the requirement to create QStrings just to hand Unicode strings to Qt APIs.\r\n\r\nThis talk will introduce you to the new idioms forming around QStringView, enabling you to take full advantage of the Qt string APIs in 5.10 and beyond. We will also explore patterns useful for evolving your own APIs to embrace QStringView. Finally, we will take a look at QLatin1String/QStringView co-evolution and the proposed QUtf8String class. The talk assumes some knowledge of the current Qt string APIs, but should be accessible to anyone who ever worked with string classes in object-oriented languages.","persons":[{"id":3576,"full_public_name":"Marc Mutz","first_name":"Marc","last_name":"Mutz"}],"links":[]}],"Room A05":[{"id":2983,"start":"14:30","duration":"00:25","room":"Room A05","slug":"using-virtual-keyboards-qt-embedded-devices","title":"Using Virtual Keyboards on Qt Embedded Devices","subtitle":"","tracks":["Embedded"],"track":"","type":"","language":"","abstract":"","description":"There is an increasing need to support text input via virtual keyboards not only on Mobile phones but also on embedded devices and in in-vehicle infotainment systems. Qt provides an input method API to provide exactly that support. We will look at the Qt API and show how it can be used from applications and how it can be integrated in different embedded device use cases with either single process fullscreen EGL or in a multi process Wayland compositor scenario. We will have a look at some virtual keyboards like the Qt Virtual Keyboard and other open source solutions. We will look at some advanced features of virtual keyboards like support for different layouts, support for text correction and prediction, support for handwriting and support for multiple languages especially CJK languages.","persons":[{"id":2943,"full_public_name":"Jan Arne Petersen","first_name":"Jan Arne","last_name":"Petersen"}],"links":[]},{"id":3548,"start":"14:55","duration":"00:25","room":"Room A05","slug":"coap-standard-makes-iot-talk-qt","title":"How CoAP Standard Makes your IoT Talk with Qt","subtitle":"","tracks":["Automation","Embedded"],"track":"","type":"","language":"","abstract":"","description":"One of the big critical challenges of IoT is: How should these Things communicate together?\r\n\r\nMany standards emerged in the last years, but one seems to fit perfectly with Qt philosophy: CoAP protocol. Now is a good time to get interested in it, as this HTTP based protocol will come to Qt ! In this session we will cover this technology, its challenges and stakes, how to use it in Qt and most importantly we will cover several scenarios and see how this protocol can help you.","persons":[{"id":3547,"full_public_name":"Adrien Leravat","first_name":"Adrien","last_name":"Leravat"}],"links":[]},{"id":3586,"start":"13:55","duration":"00:25","room":"Room A05","slug":"qt-embedded-device-creation-future-direction","title":"Qt in Embedded Devices - Future Direction","subtitle":"","tracks":["Embedded"],"track":"","type":"","language":"","abstract":"","description":"Qt is extremely successful and widely used in embedded device creation. The baseline of Qt is evolving through open governance model on top of which The Qt Company is creating commercial value add and industry specific solutions. Following the industry evolution, Qt supports widening range of devices, fits smaller and scales higher as well as have support for new categories of UI’s.","persons":[{"id":3585,"full_public_name":"Santtu Ahonen","first_name":"Santtu","last_name":"Ahonen"}],"links":[]},{"id":3688,"start":"13:30","duration":"00:25","room":"Room A05","slug":"accelerating-time-market-embedded-device-qt-learnings","title":"Accelerating Time to Market for Embedded Device, Qt Learnings","subtitle":"","tracks":["Embedded"],"track":"","type":"","language":"","abstract":"","description":"This presentation will go through solutions for tackling the most common issues in executing a large scale software program. The learnings are mainly based on the extensive experience with embedded customers over the years. However the learnings are easy generalize to cover any large scale software project when creating innovative embedded devices based on Qt.\r\n\r\nSoftware project actually starts earlier than the first line of code is written. In these presentation we will look the learnings from technology selection up till final maturization of device software. The biggest decisions contributing to a short time to market are done in the early days of the program. Understanding the final user experience at least on a conceptual level helps any program to decide the requirements for hardware. It is fundamental the hardware decision is done with software in mind. This may sound naïve but still today we see projects where cost of a piece of silicon is driving the decision with a mind-set “software will be adjusted to work with this”. The right hardware with the right system architecture gives you a solid foundation for fast time to market. Other elements of the short time to market are in the hands of software units from design to actual implementation with good software practises. We will take a closer look on each the phases we have recognized in the embedded device creation project.\r\n\r\nIn the second phase of the presentation we will address the solutions for top issues described earlier. The issues can be solved roughly in two different ways – using the right Qt tools / capabilities or changes in the way of working throughout the organization. We will illustrate with examples how to concretely shorten the time to market with Qt tools available from us and/or our key partners. Furthermore we will share the best practises from our customer cases in building the most capable software processes for embedded device creation.","persons":[{"id":3583,"full_public_name":"Jouko Luukas","first_name":"Jouko","last_name":"Luukas"}],"links":[]},{"id":3691,"start":"16:25","duration":"00:25","room":"Room A05","slug":"gestures-handline-qt","title":"Gestures Handling in Qt","subtitle":"","tracks":["Embedded"],"track":"","type":"","language":"","abstract":"","description":"Today’s devices have powerful and complicated multi touch capabilities that application developers struggle to fully take advantage of. The gestures system in Qt provides a great way to offer the users exactly what they expect from a modern user interface. But powerful and complicated always present challenges for us developers, and it can be difficult to fully use the power that the gesture system in Qt offers.\r\n\r\nI have been part of a couple of very large gestures based UI projects lately, and in this presentation I will try to help you get a lot of the knowledge I have gathered in those and previous projects. I will show you - how to get started with the gestures, both with QML and widgets - how to add custom gestures handling - how events propagate in widgets - how mouse and touch work together - how to use your phone for testing multi touch - how to debug this type of code.\r\n\r\nWe will also share some of the knowledge from working with different Qt versions, and other bits of knowledge picked up while working on real life projects with these classes. Gestures is a part of Qt that is not as well understood or as well handled as many other parts. But it’s vital in offering user interfaces that work like users of today understand.","persons":[{"id":2951,"full_public_name":"Bo Thorsen","first_name":"Bo","last_name":"Thorsen"}],"links":[]},{"id":3897,"start":"16:00","duration":"00:25","room":"Room A05","slug":"knx-iot-world","title":"KNX in the IoT World","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Overview of current smart buildings interoperability options towards IoT systems, followed by future look to more native integrations with IoT and extensions to increase semantic understanding.","persons":[{"id":3899,"full_public_name":"Dries Verbrugge","first_name":"Dries","last_name":"Verbrugge"}],"links":[]}],"Room B09":[{"id":2984,"start":"16:00","duration":"00:50","room":"Room B09","slug":"success-mobile-first-real-business-case","title":"Success With Mobile First in a Real Business Case","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"This session will deal with ProfSys Mobile, a very comprehensive mobile first app that enables nurses to do their daily patient documentation work. In a life demo Roland will inter alia show the app’s huge offline capabilities, its mobile first driven interface, its awesome performance, and how comprehensive a feature set of a mobile app can be in these days.\r\n\r\nThe session will be presented in form of a case study. Roland starts at a point where the todays users cry for more mobile apps, not just because they use their mobile phones in their private daily life, but because they also must manage their nursing documentation just in time by law. Proceeding with how the app’s user interface has evolved from observing the users’ daily business, Roland will then deal a bit deeper with the app’s offline capabilities, which are very important to the health care industry, since on one hand it would be very expensive to equip all nursing homes with overall Wi-Fi coverage, and on the other hand there are too much areas with bad cell network coverage in case of mobile nursing services.\r\n\r\nAdditionally, and that is why Roland speaks at this Qt conference rather than elsewhere, there was the big challenge to decide for an appropriate mobile platform. In the present case, it was not possible to make this decision. The customers wanted to use all platforms, which lead to Qt, the nowadays greatest opportunity to develop multi-platform apps, since it reduces both, development costs and time to market, without giving up any performance or comfort.\r\n\r\nOverall the session will explain how a specific development approach can lead to a very comprehensive and sustainable mobile app for a real business that contributes to the company’s success.","persons":[{"id":2944,"full_public_name":"Roland Wienen","first_name":"Roland","last_name":"Wienen"}],"links":[]},{"id":2995,"start":"13:55","duration":"00:25","room":"Room B09","slug":"2995","title":"Qt in Use in Fortune 500 Companies – Best Practices & Tips for a Faster Time-to-Market","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"This session highlights Qt applications designed for multiple platforms developed by V-Play. We will share our experience & best practices learned from more than 40 published apps in the mobile app stores, embedded devices and Desktop PC. The Qt showcases include:\r\n\r\n• Business cross-platform applications used by Fortune 500 companies like T-Mobile and Novartis on iOS, Android and Windows Phone with more than a million downloads, powered by Qt.\r\n• A remake of the popular UNO card game with Qt including multiplayer support to play against other players world-wide. We will highlight how this game was developed in less than a month, and how some of the retention features from the gaming world can be used in business apps.\r\n\r\nThis talk shows the diversity of applications you can make with Qt, and gives you tips how to create your own cross-platform applications more efficiently. You will learn:\r\n\r\n• How to improve the development lifecycle with testing and deployment optimizations.\r\n• How to speed up your time-to-market.\r\n• How Qt compares to other application frameworks like React.\r\n• Which 3rd party tools helped us to save the most time in the software life-cycle.","persons":[{"id":2953,"full_public_name":"Alex Leutgöb","first_name":"Alex","last_name":"Leutgöb"},{"id":2952,"full_public_name":"Christian Feldbacher","first_name":"Christian","last_name":"Feldbacher"}],"links":[]},{"id":3015,"start":"14:30","duration":"00:25","room":"Room B09","slug":"first-experience-qt-mobile-journey","title":"First Experience with Qt for Mobile: Our Journey","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"As the smartphone slowly becomes a necessity (or is it already?) in our world, we are faced with the task of replicating the same app on multiple platforms. This always leads to development overhead: staffing, make sure all teams understood requirements and maintenance costs once the app is live. Trying to reduce this overhead we tried Qt for Mobile: its promise to run on multiple platforms and our previous experience with Qt made it an obvious choice.\r\nIn this session, we will present our journey with Qt for Mobile. We started with a team without previous mobile development experience, and we’ll walk you through our journey in creating our first mobile app: the challenges we faced, the main points where Qt helped us, and where it got in our way. And how much the “Write Your App Once, Deploy It Everywhere” motto advertised by the Qt Company applies in our case.","persons":[{"id":3781,"full_public_name":"Bogdan Ogrean","first_name":"Bogdan","last_name":"Ogrean"}],"links":[]},{"id":3017,"start":"14:55","duration":"00:25","room":"Room B09","slug":"one-developer-three-products-three-platforms","title":"One Developer, Three Products, Three Platforms","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"Back in June 2014, when I started my company I had one single product. Its name was LIVKONTROL and it was available for iOS and Android, with two distinct code bases.\r\nQt for mobile was giving its first steps and I had a terrible decision in my hands: how can I develop new features on my only product, for both platforms, keeping visual and behaviour coherence in a small time frame? This was a turning point.\r\nI deciced to build a new product to test Qt for mobile capabilities. In just one and half months I was able to develop a new app from the scratch that was working consistently across two different platforms: iOS and Android. TKFX was born (September 2014).\r\nAfter ensuring myself that it was possible to achieve solid results I decided to refactor my existing product (which was quite complex already) and after 9 long months I have released the first version of LK (March 2015). After two successfull product creations from the ground up I was convinced of one thing: Qt was by far the most quicker way of building and deploying an app I ever used.\r\nThis lead me to an even bigger challenge: create a synthesizer that would be available for iOS, Android and Desktop (as a VST / Audio Unit plugin). DRC was launched at March 2016 and today is considered by users one of the most beautiful sounding virtual analog synth available on the market.\r\nIn this talk I will share the challenges of being a solo developer with three products on the market that runs on three platforms and how only Qt could make it possible.","persons":[{"id":2969,"full_public_name":"Nuno Filipe Magalhães Santos","first_name":"Nuno Filipe Magalhães","last_name":"Santos"}],"links":[]},{"id":3812,"start":"13:30","duration":"00:25","room":"Room B09","slug":"investing-software-technologies","title":"Investing into Software Technologies","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"The software industry has been developing for over 70 years, what have we learned, what are the best practices and what does the software development world look like in the future?","persons":[{"id":3813,"full_public_name":"Petteri Holländer","first_name":"Petteri","last_name":"Holländer"}],"links":[]}],"Room C01":[{"id":2993,"start":"13:55","duration":"00:25","room":"Room C01","slug":"qml-c-developers","title":"QML For C++ Developers","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"This presentation is for those of you either have no previous Qt knowledge and need some help with getting started on the right track with QML. And it is for those of you who have been a Qt coder for years, but never done any real QML work, and think widgets is still the proper way to do UIs. I will try to convince you that QML is actually useful and maybe even worth your time. QML and Qt Quick are two related topics that an all round Qt developer must at least understand. There are strengths and weaknesses in QML as well as in widgets, and if you only use one of those, you will not completely use all the power that Qt offer to you and your users. The most important part of this presentation is that I will try and help you understand how to think in the proper style of QML. It’s a very different language and mindset, when coming from a C++ point of view, and it takes some time to fully understand the way to think. And looking at examples only gets you some of the way, because those are usually so small that it’s hard to imagine how QML is actually useful for writing large user interfaces. I will show you how to get started with QML based projects - where should files go, how do you work with Qt Creator, how should I approach the development of these things, etc. This will give you a foundation for your daily life with the QML code. I will also help you with the foundations of how to build the QML code. How to structure it properly, how to do encapsulation, and how to modularize the code for reuse. Finally, I will talk about what parts of the project should remain in C++, and how the C++ and QML layers will communicate.","persons":[{"id":2951,"full_public_name":"Bo Thorsen","first_name":"Bo","last_name":"Thorsen"}],"links":[]},{"id":2994,"start":"16:00","duration":"00:50","room":"Room C01","slug":"app-development-qt-technical-tips-examples-development-testing","title":"App Development with Qt: Technical Tips and Examples for Development & Testing","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"In this session you will learn all aspects for application development with Qt: we will present development, testing and deployment tips and best practices used in the Qt World Summit conference app and other apps with millions of downloads. We explain the code used in such applications and present code snippets so you can develop these applications yourself. This session shows how to develop applications for multiple screen sizes, screen resolutions and form factors like smartphones, tablets, desktop PCs and embedded devices with Qt. We show how you can use the same code base, while having native-looking UIs & UX across platforms. This includes tips for responsive design with Qt and how to best leverage the screen size, resolutions and screen densities.\r\n\r\nWe also answers questions like:\r\n\r\n• What are best practices for user authentication?\r\n• How to connect to a REST API?\r\n• Which backend shall I use in my application?\r\n• How to synchronize data from the backend with the client and how to cache it for offline usage?\r\n• How to use multiple languages and internationalization?\r\n• Tips and tricks for List Views You will also learn how you can test multiple screen resolutions and platforms including iOS & Android and their native UI from a single Desktop application.\r\n\r\nIn the second part of this session, we will highlight how you can leverage the full app lifecycle with Qt: from design to development, testing, deployment to publishing. And how you can efficiently perform post-publishing tasks like analytics & ongoing app improvements in the Qt ecosytem. This presentation gives you a technical overview with code snippets and hands-on examples of the possibilities with Qt for multi-screen development and multi-platform application development and shows best practices for an efficient app lifecycle with Qt.","persons":[{"id":2952,"full_public_name":"Christian Feldbacher","first_name":"Christian","last_name":"Feldbacher"}],"links":[]},{"id":3565,"start":"14:55","duration":"00:25","room":"Room C01","slug":"test-coverage-qt-c-qml","title":"Test Coverage of Qt C++ and QML","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Code coverage is a metric for the degree of testing that is being done. This talk will explain the various metrics from Statement Coverage to Modified Condition/Decision Coverage (MC/DC), depict their strengths and drawbacks and show how to deal with the challenges posed by Qt C++ and QML code. Software safety standards like ISO 26262 (road vehicles), EN 50128 (railway applications) an DO-178 C (airborne systems) and others require software developers to ensure software quality through analysis of code coverage achieved through their tests. Among other measures.\r\n\r\nThis talk will define what this metric means and - equally important - what it does not mean. Standard levels measured are statement coverage, branch coverage, decision coverage and the more complex modified/condition decision coverage (MC/DC) or multiple condition coverage (MCC). We'll look at the advantages and drawbacks of these levels and what kind of testing efforts they require.\r\n\r\nQt applications pose several special challenges for measurement of code coverage: first, usage of the Meta Object Compiler (MOC), the User Interface Compiler (UIC) and various macros leads to automatically generated code that can sometimes be hard to fully cover. Secondly, the language QML includes both static declaration and dynamic JavaScript code. Above topics will be illustrated through some live demonstrations with different tools. The automated Qt tests will serve as a relatively large real-world example for viewing test coverage. Based on selected spots in the code we'll investigate gaps in current QA measures. Dynamic analysis like code coverage has to be distinguished from static analysis. Nevertheless, some classic static code metrics will be listed as their monitoring is also recommended by the safety standards listed at the beginning. At the end efforts and benefits of code coverage will be compared with pragmatic recommendations for every day usage.","persons":[{"id":3563,"full_public_name":"Harri Porten","first_name":"Harri","last_name":"Porten"}],"links":[]},{"id":3615,"start":"11:40","duration":"00:15","room":"Room C01","slug":"qt-for-automotive","title":"Future of Vehicle HMI Systems","subtitle":"","tracks":["Automotive","Keynote"],"track":"","type":"","language":"","abstract":"","description":"In a  car cabin, there are various devices which have display for drivers and passengers. Among them, especially IVI  system would have the most screen transition over than 1,000. In such large scale SW of IVI system,  what would be key point for HMI  development?\r\n\r\nE-cockpit system  is composed of multiple ECU like IVI, Digital meter, Head up Display(HUD), Camera Monitoring system (CMS), ADAS and so on.\r\nIn developing such e-cockpit system, what would be required for HMI tool?\r\n\r\nCabin would be more  like living  room by autonomous driving technology, AR-goggles and gesture unit might be integrated on top of E-cockpit system.\r\nWhat is crucial for such system in HMI respect.\r\n\r\nMr. Tanabe argues  such key points of Qt for Automotive.","persons":[{"id":3616,"full_public_name":"Takayuki Tanabe","first_name":"Takayuki","last_name":"Tanabe"}],"links":[]},{"id":3694,"start":"14:30","duration":"00:25","room":"Room C01","slug":"introduction-user-experience-design-developers","title":"Introduction to User Experience Design for Developers","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"This session is an introduction to User Experience (UX) design, specifically focusing on issues that software developers encounter. While developers tend to focus on the implementation details of getting pixels on the screen, less consideration is often given to what pixels go where, and who besides the developer will be interacting with them. In this session we will present an overview of the UX process, highlighting several best practices. You will come away from the session with a better understanding of the thought process needed to create a high-quality user experience a set of actionable guidelines to keep in mind during implementation.","persons":[{"id":3692,"full_public_name":"Jeff LeBlanc","first_name":"Jeff","last_name":"LeBlanc"}],"links":[]},{"id":3706,"start":"10:45","duration":"00:45","room":"Room C01","slug":"one-hundred-languages","title":"One Hundred Languages","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Computers surround us in our daily lives, but the most powerful ideas of computing go beyond the sleek silver containers and glowing boxes. What are these ideas? And how do we prepare our kids for a world where more and more of the problems around us look like computers?\r\n\r\nTo find out, we'll travel back in time: from a jacquard loom maker with his punch cards, an inventor obsessed with cogs and steam, an electrical engineer who combined laws of electrical circuits with eccentric English mathematical logic and countless other philosophers, material scientists, artists, dreamers and tinkerers. Technology is about humans, and big their ideas.\r\n\r\nLinda Liukas will talk about how we can move towards a more humane tech industry, and identifies what it means to approach technology from the unique perspective.","persons":[{"id":3022,"full_public_name":"Linda Liukas","first_name":"Linda","last_name":"Liukas"}],"links":[]},{"id":3707,"start":"10:00","duration":"00:45","room":"Room C01","slug":"measure-cant-see","title":"How Do You Measure What You Can't See?","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Dr. Steven Goldfarb from the CERN ATLAS experiment talks about how to answer the most profound questions humanity has.","persons":[{"id":3024,"full_public_name":"Dr. Steven Goldfarb","first_name":"Dr. Steven","last_name":"Goldfarb"}],"links":[]},{"id":3720,"start":"12:05","duration":"00:10","room":"Room C01","slug":"imaging-systems-unravel-cancer","title":"Imaging Tissue Architecture: The Next Frontier in Battling Cancer","subtitle":"","tracks":["Keynote","Medical"],"track":"","type":"","language":"","abstract":"","description":"We have spent a decade sequencing the human genome, what some may call a blueprint of life. But, as magnificent as it is to know all our genes, it is really just the beginning. We still need a map to figure how all the parts are connected, how they communicate and what goes wrong in disease. Physicist Michel Nederlof discusses his QiTissue software’s ability to analyze and visualize large 3D images with hundreds of color channels that allow digital image analysis of tissue architecture – a tool that may unravel the mystery of solving cancer.","persons":[{"id":3718,"full_public_name":"Michel Nederlof","first_name":"Michel","last_name":"Nederlof"}],"links":[]},{"id":3723,"start":"11:30","duration":"00:10","room":"Room C01","slug":"behind-scenes-show-car-rapid-uiux-prototyping-production","title":"Behind the scenes of a show car: Rapid UI/UX prototyping and production","subtitle":"","tracks":["Automotive","Keynote"],"track":"","type":"","language":"","abstract":"","description":"Alex heads the Advanced Graphics and Rendering team at Mercedes-Benz Research and Development in the Silicon Valley. He is working with Mercedes-Benz’ engineering and design teams around the world to realize innovative UI / UX concepts for production and show cars. Alex holds a PhD (Dr.-Ing.) in computer science.","persons":[{"id":3721,"full_public_name":"Alex Hilliger","first_name":"Alex","last_name":"Hilliger"}],"links":[]},{"id":3738,"start":"11:55","duration":"00:10","room":"Room C01","slug":"using-qt-build-next-generation-intuitive-high-end-cameras","title":"Using Qt to Build Next Generation Intuitive High End Cameras","subtitle":"","tracks":["Embedded","Keynote"],"track":"","type":"","language":"","abstract":"","description":"Hasselblad cameras are renowned for their iconic ergonomic design, uncompromising image quality and Swedish craftsmanship. For over half a century Hasselblad cameras have captured some of the world’s most iconic images – including the first landing on the moon – and helped shape the way we look at the world through genuine photographic artistry.\r\n\r\nThe Hasselblad X1D, the mirrorless 50MP camera is a game changer in the world of photography.","persons":[{"id":3730,"full_public_name":"Richard Röjfors","first_name":"Richard","last_name":"Röjfors"}],"links":[]},{"id":3807,"start":"13:30","duration":"00:25","room":"Room C01","slug":"inside-qt-object-model","title":"Inside The Qt Object Model","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Programming your application with Qt means that you will sooner or later encounter the central QObject class, signal & slot connections, or generic properties. The object model makes it safe and easy to develop with components.\r\n\r\nIn this session we will take a look at the implementation of these features. For example, how emitting a signal with one line of code results in calling the right slot elsewhere. This is even possible when the sender lives in a different thread than the receiver. In addition, we will learn how reading and writing properties works behind the scenes.","persons":[{"id":3808,"full_public_name":"Simon Hausmann","first_name":"Simon","last_name":"Hausmann"}],"links":[]},{"id":3870,"start":"09:30","duration":"00:30","room":"Room C01","slug":"welcome-qt-world-summit-2017","title":"Welcome to Qt World Summit 2017","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Juha Varelius, the CEO of Qt Group will open the event and welcome everyone to the event.","persons":[{"id":3868,"full_public_name":"Juha Varelius","first_name":"Juha","last_name":"Varelius"}],"links":[]},{"id":3883,"start":"12:25","duration":"00:10","room":"Room C01","slug":"ides-boring-embedded-devices-weird","title":"An IDE for Embedded Devices","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Justin Howard is a software engineer unravelling the complex at Qualcomm’s UK design centre. He’s charged with bringing together an ever increasing range of embedded devices into a single IDE, His goal is to make sure no-one notices. During this short presentation he’ll guide you on how he went about achieving this and how The Qt Company removed a sizable amount of pain from the problem.","persons":[{"id":3881,"full_public_name":"Justin Howard","first_name":"Justin","last_name":"Howard"}],"links":[]},{"id":3892,"start":"12:15","duration":"00:10","room":"Room C01","slug":"game-engine-evolution-tech-ux","title":"Game Engine Evolution: From Tech to UX","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Now that the technology to create rich and detailed simulations has become accessible to a massive community of content creators, game engine development has shifted focus from runtime technology to ease of use. How can developers easily and rapidly create the highest quality, connected content? Amazon’s Lumberyard has evolved with the new UX-driven landscape by transitioning its editor and tools to Qt, leveraging its power to develop ambitious projects without compromising on performance, quality, or usability.","persons":[{"id":3859,"full_public_name":"Alex Montgomery","first_name":"Alex","last_name":"Montgomery"}],"links":[]}],"Room B05":[{"id":2998,"start":"13:55","duration":"00:25","room":"Room B05","slug":"whats-new-qt-3d","title":"What's new in Qt 3D?","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"Qt 3D is a rapidly evolving module within Qt. There are lots of new features appearing with each new release to continue expanding what Qt 3D can do out of the box. Engineers from KDAB and The Qt Company have been hard at work over the last months (and will be for some time to come yet) adding in some of the most frequently requested features.\r\nIn this talk we will take a tour of some of the more prominent features added to Qt 3D and take a peek at what is coming in Qt 5.10 and beyond Qt 3D in Qt 5.8/5.9:\r\n• Embedding Qt Quick within Qt 3D to make overlays or interactive displays in your 3D worlds\r\n• Physically Based Rendering support for intuitive materials and realistic lighting\r\n• Key frame animation support to breathe life into your entities\r\n• Level of Detail (LoD) support for better performance\r\n• 2D and 3D text support directly in Qt 3D Qt 3D in Qt 5.10 and beyond\r\n• Skeletal animation support to animate parts of your entities in an intuitive way\r\n• Physics simulation and collision detection\r\n• Graph based shader generation for dynamic material shaders\r\n• Virtual Reality support","persons":[{"id":2954,"full_public_name":"Dr Sean Harmer","first_name":"Dr Sean","last_name":"Harmer"}],"links":[]},{"id":3552,"start":"13:30","duration":"00:25","room":"Room B05","slug":"creating-3d-user-interfaces-qt-3d-studio","title":"Creating 3D User Interfaces with Qt 3D Studio","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"With the use of 3D technologies increasing significantly across all industries – especially in the automotive, healthcare and industrial automation sectors – innovative 3D user interface design tools have become highly sought after by organizations and independent developers. Earlier this year the Qt Project received a sizeable contribution from NVIDIA Corporation as they chose to contribute the NVIDIA DRIVE™ Design Studio, a designer friendly 3D UI authoring system, to Qt. By combining this tool to Qt’s cross-platform framework of software and device development tools, we can deliver a world-class 3D design solution for the creation of embedded devices and in-vehicle infotainment (IVI) systems and digital cockpits.\r\n\r\nOur goal is to integrate this closely, so that designers can easily create 3D user interfaces that are easily integrated with the rest of the application written in Qt. The UIs can then also easily be extended using Qt Quick or Qt 3D. We are also working on ensuring that the tool and runtime will be fully cross-platform and work on all operating systems and GPUs supported by the rest of Qt.\r\n\r\nIn this talk we will go through the Qt 3D Studio key features, current status of the development and the product roadmap.","persons":[{"id":3551,"full_public_name":"Sami Makkonen","first_name":"Sami","last_name":"Makkonen"}],"links":[]},{"id":3568,"start":"16:00","duration":"00:50","room":"Room B05","slug":"qt-3d-runtime-enabler-case-study-implementing-high-level-3d-ui-runtimes-top-qt-3d","title":"Qt 3D as a Runtime Enabler: A Case Study for Implementing High-Level 3D UI Runtimes on top of Qt 3D","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"Qt 3D is a framework for implementing data-driven 3D scenes with C++ or QML. However, building applications directly with this API can be a daunting task, especially for newcomers. Setting up frame graphs, render passes, materials and similar all require prior knowledge of 3D graphics pipelines. There is also a lack of tooling: those looking for designer-friendly scene and animation editors have been left out in the cold - until recently. With the advent of the 3D Studio contribution from NVIDIA, the tooling situation is going to be improved vastly.\r\n\r\nAt the same time, when it comes to the runtimes, this is going to lead to a more convoluted graphics engine landscape inside Qt: OpenGL (or other graphics APIs) and scene graphs built on top are now in direct and independent use in Qt Quick, Qt 3D, Qt 3D Studio, and a number of other traditional components in the stack. This leads to the exciting question of the feasibility of unifying the low-level layers by implementing the runtime for 2D/3D user interface frameworks like Qt Quick, Qt 3D Studio, or anything else, on top of Qt 3D. While this may seem logical and straightforward at first, the road to fully retrofitting a foreign scene graph and material, lighting and animation system on top of Qt 3D is definitely bumpy, to say the least.\r\n\r\nIn this talk we are going to take a look at the experiences and lessons learnt while attempting to implement some of the above as part of a research project. The results, and the issues encountered along the way, will provide valuable input to anyone working with Qt 3D, either in C++ or QML.","persons":[{"id":3560,"full_public_name":"Laszlo Agocs","first_name":"Laszlo","last_name":"Agocs"}],"links":[]},{"id":3682,"start":"14:30","duration":"00:50","room":"Room B05","slug":"earth-rendering-qt-3d","title":"Earth Rendering with Qt 3D","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"Qt 3D is a rapidly evolving module within Qt. There are lots of new features appearing with each new release to continue expanding what Qt 3D can do out of the box. Engineers from KDAB and The Qt Company have been hard at work over the last months (and will be for some time to come yet) adding in some of the most frequently requested features.\r\n\r\nIn this talk we will take a tour of some of the more prominent features added to Qt 3D and take a peek at what is coming in Qt 5.10 and beyond. Qt 3D in Qt 5.8/5.9\r\n\r\n• Embedding Qt Quick within Qt 3D to make overlays or interactive displays in your 3D worlds\r\n• Physically Based Rendering support for intuitive materials and realistic lighting\r\n• Key frame animation support to breathe life into your entities\r\n• Level of Detail (LoD) support for better performance\r\n• 2D and 3D text support directly in Qt 3D Qt 3D in Qt 5.10 and beyond\r\n• Skeletal animation support to animate parts of your entities in an intuitive way\r\n• Physics simulation and collision detection • Graph based shader generation for dynamic material shaders\r\n• Virtual Reality support","persons":[{"id":3562,"full_public_name":"Paul Lemire","first_name":"Paul","last_name":"Lemire"}],"links":[]}],"Room B07":[{"id":3000,"start":"16:25","duration":"00:25","room":"Room B07","slug":"gammaray-taking-deeper-look-qt-application","title":"GammaRay - Taking a Deeper Look into Your Qt Application","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"GammaRay is a high-level introspection tool for Qt programs that enables you to visualize and manipulate application behavior at runtime. In this talk we will look at new capabilities and features GammaRay has gained since last year, and how those assist you in solving real-world debugging and profiling problems.\r\nWhen creating applications we strive to use higher-level frameworks in order to obtain results quickly and reduce development effort as well as long-term maintenance cost. This however provides a few challenges during debugging and profiling. With conventional instruction-level tools we need to have a reasonably deep understanding of the implementation of the frameworks, libraries and components we use, to interpret the results correctly. Tools with an understanding of the building blocks we use mitigate this problem. GammaRay is such a tool for Qt.\r\nFollowing last year's talk on the same subject, we'll look at the most important changes in GammaRay in its recent releases, ranging from improvements in object tracking to new visual aids for layouting and debugging Qt Quick UIs. We will then see how to apply those to a number of debugging and profiling examples. All examples are based on real-world problems KDAB engineers encountered in their daily work, and aim at giving you an idea on how GammaRay can help with problems you might encounter in your own Qt application.","persons":[{"id":2955,"full_public_name":"Volker Krause","first_name":"Volker","last_name":"Krause"}],"links":[]},{"id":3010,"start":"14:55","duration":"00:25","room":"Room B07","slug":"vehicle-infotainment-system-smart-buses-developed-qtqml","title":"An In-Vehicle-Infotainment-System for Smart Buses Developed with Qt/QML","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"We are excited to see smart vehicles taking part in our life day by day. As well as private cars, public transport vehicles are evolving as intelligent machines. Of course, modern infotainment systems are regarded as crucial part of this evolution.\r\nIn this text, we will present an In-Vehicle-Infotainment System software developed by Turkey’s one top-tier software and engineering consultancy vendor STM Defense Technologies&Engineering Inc. for Turkey’s first smart bus, Avenue IBUS, manufactured by TEMSA ,leading bus, coach and light truck manufacturer,which exports buses to 64 countries. The vehicle carries a telemetry system with built in 3G modem to share instant vehicle data with the control center and external infotainment system for the driver. An automotive-grade Android IVI system communicates with vehicles telemetry and watchdog over Ethernet. It shows driver status of the vehicle including brake lining thickness, oil temperature, faults in components, driving efficiency and some driving statistics.\r\nThe software is developed for Android under both OS X and Windows environment leveraging seamless development with Qt Creator and is able to run on different platforms. Softwares user interface benefits from QML allowing us simply and quickly develop the screen-size independent animated interface, present multi-language UI with help of Q Translator and handle program logic in C++ back-end.\r\nThe tablet has no Internet connection and is powered by ignition switch thus always subjects to a power outage. System time requires reset on every reboot as no Internet is available. With Qt it is possible to set GPS time of Android system once the connection with telemetry is established. This Internet isolated software is able to check if any update available through local network with telemetry. If there is, the update file is downloaded from telemetry and is installed automatically with a few lines of code thanks to Qt.\r\nIn short, this talk will present audience the Android IVI System developed and how system settings, updates without direct Internet connection is managed easily with Qt without using Java.","persons":[{"id":2962,"full_public_name":"Muhammet Ali Asan","first_name":"Muhammet Ali","last_name":"Asan"}],"links":[]},{"id":3588,"start":"13:55","duration":"00:25","room":"Room B07","slug":"qml-driven-hmi-architectures-rolling-embedded-devices","title":"QML-driven HMI Architectures for Rolling Embedded Devices","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"While QML offers a fast-paced developer experience on embedded devices 'by design', many high-level decisions need to be made to form the software architectures for highly complex car interfaces we know today. In this talk, I will briefly present how modern automotive software relates to classical embedded device software, and which early decisions in the architecture need to be made differently, or exactly the same, to avoid painstaking complexity in QML code.\r\n\r\nThe presentation will cover best practices in multi-process architectures, global styling choices, and performance considerations for limited hardware resources.","persons":[{"id":3587,"full_public_name":"Christoph Sterz","first_name":"Christoph","last_name":"Sterz"}],"links":[]},{"id":3756,"start":"13:30","duration":"00:25","room":"Room B07","slug":"qt-automotive-suite","title":"Race to Digital Cockpits - Win with Qt","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"Tero Marjamäki, Head of Automotive at The Qt Company, will open automotive track at Qt WS. He will share the latest trends in digitalizing automotive, especially in the area of digital cockpits and experience mobility. In addition, he will share the latest developments by Qt and its partners helping automotive industry to innovate and response the challenges in creating great digital user experiences.","persons":[{"id":3714,"full_public_name":"Tero Marjamäki","first_name":"Tero","last_name":"Marjamäki"}],"links":[]},{"id":3783,"start":"16:00","duration":"00:25","room":"Room B07","slug":"utilize-qt-framework-gesture-control-human-body-tracking-applications-automotive-environment","title":"Utilize the Qt Framework for Gesture Control and Human Body Tracking Applications in an Automotive Environment","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"Many advanced automotive concepts for the next decade make use of smart sensors. More and more imaging sensors get into cars, today mostly focussing on the outside of the vehicle - road, traffic, pedestrians. Sensors focussing on the driver will allow for additional comfort and safety applications to detect drowsiness and distraction, to optimise airbag deployment, to manage the hand-over between autonomous and non-autonomous driving and to allow for advance HMI concepts based on gesture control.\r\n\r\ngestigon - now a Valeo brand - has developed in the last 6 years systems for gesture control and behavior tracking based on 3D sensors, image processing and machine and deep learning.\r\n\r\nSascha will talk about how Qt has been used from the beginning to simplify and accelerate the development process both for the core architecture and the supplementary tools.","persons":[{"id":3784,"full_public_name":"Sascha Klement","first_name":"Sascha","last_name":"Klement"}],"links":[]},{"id":3800,"start":"14:30","duration":"00:25","room":"Room B07","slug":"hood-qt-automotive-suite-one-year-hacking","title":"Under the Hood of Qt Automotive Suite After One Year of Hacking","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"Qt Automotive Suite was released a year ago and development is making progress. This talk be focused on technical details of new features in the Qt Application Manager, the new plugin for Qt Creator, additions to Qt IVI, changes in Neptune UI, and even things we are not going to do and why. We will discuss how those features map to the needs we observe in ongoing projects and in the future ones.","persons":[{"id":3789,"full_public_name":"Johan Thelin","first_name":"Johan","last_name":"Thelin"}],"links":[]}]}},"2017-10-12":{"index":2,"date":"2017-10-12","rooms":{"Room A03":[{"id":2972,"start":"16:25","duration":"00:25","room":"Room A03","slug":"qtwebgl","title":"QtWebGL","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Presentation of one of the new features in Qt. It will show how to create allow to stream a Qt Quick application over the network and render it into a browser.","persons":[{"id":2933,"full_public_name":"Jesus Fernandez Prieto","first_name":"Jesus Fernandez","last_name":"Prieto"}],"links":[]},{"id":2986,"start":"13:30","duration":"00:50","room":"Room A03","slug":"boot-time-optimization-linux-based-qt-powered-embedded-devices","title":"Boot Time Optimization for Linux-based Qt-powered Embedded Devices","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Boot time is an important characteristic for some systems, such as those which must immediately provide a functioning user interface to its users when powered on. Commonly this capability is achieved using a minimal operating system. However, we will discuss how a full-featured Linux-based Qt-powered device can be optimized to reduce boot time by an order of magnitude. The first half of this presentation will uncover the application and Qt level optimizations and the second half of the session will cover the boot loader/kernal strategies with Qt. We will begin to analyze some of the important hardware attributes that influence a system’s boot time. A Toradex System-on-Module (SoM) will serve as an example platform requiring exploitation to shed precious milliseconds from boot-up. We will take a look at the boot sequence, digging into the boot ROM, U-boot bootloader, Linux kernel & Qt application. Boot time optimization strategies will be shared for each of these links in the boot chain ultimately allowing the typical boot time for a general purpose embedded Linux system to be reduced from 10-20 seconds to 1-2 seconds for a specialized application.","persons":[{"id":3728,"full_public_name":"Risto Avila","first_name":"Risto","last_name":"Avila"},{"id":2945,"full_public_name":"Stefan Agner","first_name":"Stefan","last_name":"Agner"}],"links":[]},{"id":3005,"start":"11:55","duration":"00:25","room":"Room A03","slug":"qtknx-new-qt-module-dedicated-home-automation","title":"QtKnx: The New Qt Module Dedicated to Home Automation","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"The home automation industry is growing. The new QtKnx module is home automation software development made easy, and open to all. We show how the KNX standard for home and building control is made available by the QtKnx module. This represents a world of opportunity in terms of developing applications, as stand alone use cases or in partnership with existing technology.\r\nThis presentation is a general overview aimed at technical minded and business people alike.","persons":[{"id":2960,"full_public_name":"Lucie Gerard","first_name":"Lucie","last_name":"Gerard"}],"links":[]},{"id":3014,"start":"15:00","duration":"00:25","room":"Room A03","slug":"practical-qt-lite","title":"Practical Qt Lite","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Qt Lite is an initiative driven by The Qt Company striving for smaller and leaner Qt builds. It utilizes the new configuration system introduced with Qt 5.8 to create custom builds stripped of features or classes that aren't needed for a given application. Focus is mostly on Embedded Linux with the goal of making Qt a feasible option on smaller systems. Qt Lite consists of two parts: The first part are changes to the Qt source code and configuration system itself to allow for compiling certain aspects out. This is part of the Open Source code base. The second part is a UI tool to manage build configurations and is part of \"Qt for Device Creation\". This presentation will look at the current state of affairs for both sides and provide guidance on how to work with Qt Lite on your own.\r\nThe talk will introduce the goals and challenges of Qt Lite. It will show how to create custom Qt builds using both the Qt for Device Creation tooling, as well as the basic configure script only. Afterwards we will take a look under the covers how Qt Lite is implemented on top of the configuration/build system to enable users to resolve build issues on their own. We will also share some benchmarks numbers on possible size reductions, usage strategies as well as potential pitfalls and future directions.","persons":[{"id":2966,"full_public_name":"Frank Meerkötter","first_name":"Frank","last_name":"Meerkötter"}],"links":[]},{"id":3582,"start":"15:25","duration":"00:25","room":"Room A03","slug":"device-tailored-compositors-qtwayland","title":"Device Tailored Compositors with QtWayland","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"In this talk, I will give an introduction into the QtWayland framework and its possible applications for automotive use-cases. The goal is to show how to use QtWayland to easily create an awesome user experiences by abstracting from the rather technical view of a window compositor developer but working with the mindset of a QtQuick developer, who mainly has user-interactions and design in their mind.\r\n\r\nUser-friendly HMI is a key customer value when looking at today's automotive industry. Let it be a car that provides features ranging from driving navigation to cinema-like entertainment for your kids at the back. Or let it be a fully equipped combine harvester where you want to control every tiny bit of the very complex machinery to reach an optimal efficiency. In any case, the user expectations are user-friendly interfaces that -- despite of safety regulations -- still look awesome. Moreover, from the complexity point of view, with having different applications encapsulated in their own processes for safety reasons, we are rapidly approaching the complexity of a full Linux desktop system.\r\n\r\nWayland is today's standard to compose windows on embedded Linux devices. In cars, one typically uses the automotive specific \"IVI\" protocol extension to talk to the compositor. This works well if you have a user interface with only limited window dynamics or animations, like a static display of windows from different processes (e.g. display consisting of a radio control window, a climate control window...). But if you want to add fancy window animations of if you have a certain complex workflow for your user interface in mind, the IVI protocol shows its limits. However, typically writing your own Wayland compositor is no option in such a case due to the amount of work and the introduced complexity and possible bugs. Since Qt 5.9, with the QtWayland Compositor API, Qt makes it almost trivial to create your own Wayland compositor. Even adding your own protocol extensions, for which your UX designers can add any fancy (QtQuick) animation you can dream of, is simple. In my talk, I will give an introduction into the QtWayland Compositor framework and show how to use it to create a Wayland compositor from scratch. I will focus on my own experience as an embedded device developer from using the framework in real-life automotive scenarios.\r\n\r\nMy hands-on example will be a simple hypothetical kitchen-aid terminal application that features the following aspects: - Windows from different example applications (clock app, tea cooking timer app, egg cooking timer app) will be composed into a uniform UI by a QtWayland based Wayland compositor. - The compositor provides a custom protocol extension for alarming (\"hey, your tea is ready!\"). - The windows will have nice animations, actually you can handle them the same way as QtQuick items in the canvas of a QtQuick application. Attending the talk will provide you with the required knowledge to do all of the above on your own and specifically show that window handling in a QtWayland compositor \"feels\" the same like doing simple declarative QtQuick UI development. Further background to my talk can be found here: http://blog.qt.io/blog/2017/03/22/qt-wayland-claas-e-systems/","persons":[{"id":3581,"full_public_name":"Andreas Cord-Landwehr","first_name":"Andreas","last_name":"Cord-Landwehr"}],"links":[]},{"id":3766,"start":"11:30","duration":"00:25","room":"Room A03","slug":"designing-internet-things-microsoft","title":"Designing the Internet of Things with Microsoft","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Learn about the end to end strategy of Microsoft in IoT, and how to harness the Windows and Azure product line in your IoT solution. Sylvain Ekel leads the Windows IoT Solution team in EMEA, and will discuss how Microsoft products work together to enable our partner’s business opportunities.","persons":[{"id":3765,"full_public_name":"Sylvain Ekel","first_name":"Sylvain","last_name":"Ekel"}],"links":[]},{"id":3797,"start":"16:00","duration":"00:25","room":"Room A03","slug":"securing-qt-based-linux-devices","title":"Securing Qt based Linux Devices","subtitle":"","tracks":["Automation"],"track":"","type":"","language":"","abstract":"","description":"Do you know what it takes to ensure your Linux-based Qt platform is secure? During this session, we'll give you an overview of both techniques and technologies for securing the software installed on your device as well as methods for keeping the device secure over its lifetime.\r\n\r\nWe’ll take a look at the impact security has on the embedded Linux product design process and provide recommendations for how you can \"secure by design\" and \"stay secure.”","persons":[{"id":3798,"full_public_name":"Maciej Halasz","first_name":"Maciej","last_name":"Halasz"}],"links":[]}],"Room B07":[{"id":2976,"start":"13:30","duration":"00:25","room":"Room B07","slug":"maximize-creativity-quality-use-hmi-automotive-trito-linkage-comprehensive-hmi-tool-chain-qt","title":"Maximize your Creativity and Quality of Use of HMI for Automotive. TRITO Linkage, a Comprehensive HMI Tool Chain for Qt.","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"HMI for automotive is getting more important and crucial area as vehicles are acquiring more advanced safety functions. Traditional development process of HMI has many issues, troubles and hassles, and many people just got used to it. One thing we need to remember is the fact that we have got used to the traditional development process of HIM at the cost of creativity, which is the most important ingredient of powerful HMI. The goal of HMI development is not to create something easy to implement, but to create something attracts users. To achieve this goal, we obviously need more appropriate development process of HMI, and many people are working on it. In this session, we propose a solution to maximize your creativity while guarantee productivity by combining a powerful toolchain, TRITO Linkage, and the powerful application framework, Qt. TRITO Linkage is a toolchain which consists of variety of plug-ins for many of Adobe applications such as Illustrator, Photoshop and Animate and standalone tools such as code generator. With TRITO Linkage, designers can easily bring their ideas to the real world, and they can hand the ideas to engineers without any hassle so that engineers can easily implement the application, thanks to the power of Qt framework. In the traditional development process of HMI, designers need to create spreadsheets to communicate with engineers and wait for a long time to see their design running in the real device. Why do we need spreadsheets to create design in the first place? TRITO Linkage and Qt will get rid of all of those unnecessary work, and let you focus on what you really need to focus on.","persons":[{"id":2935,"full_public_name":"Hirotaka Suzuki","first_name":"Hirotaka","last_name":"Suzuki"}],"links":[]},{"id":2980,"start":"15:25","duration":"00:25","room":"Room B07","slug":"plugin-based-ivi-architectures-qt","title":"Plugin-based IVI Architectures with Qt","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"With Qt quickly becoming the dominant means of developing In-Vehicle Infotainment Systems, developer teams worldwide face the choices of structuring applications at source and physical levels in ways, providing for comfort of development and debugging, ease of deployment and intellectual property protection. Being at the core of Qt’s own architecture, plugins offer ultimate flexibility in above regards, yet some of the crucial aspects of developing plugin-based architectures are surprisingly lesser known. This talk aims at providing the missing pointers, touching on: - Providing both visual items and styling via plugins - Mixing C++, QML, translations, assets and resources in plugins - Plugin loading, unloading and memory management - Developing custom plugin formats The concepts and scenarios described in the talk will be illustrated by several live demonstrations.","persons":[{"id":2940,"full_public_name":"Vladimir Moolle","first_name":"Vladimir","last_name":"Moolle"},{"id":2939,"full_public_name":"Krzysztof Krzewniak","first_name":"Krzysztof","last_name":"Krzewniak"}],"links":[]},{"id":2990,"start":"15:00","duration":"00:25","room":"Room B07","slug":"communication-slave-device-can-bus-embedded","title":"Communication with Slave Device over CAN Bus from Embedded","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"In this presentation I will show you how to use Qt application on embedded devices, like Raspberry Pi 3 with touch screen and how to control a slave device via CAN bus.\r\nWe will use Qt 5.9.1 version that has CAN bus module. As our target is an embedded device we will build Qt there. Also, I'll tell you different ways how to build, deploy and debug the application on Raspberry Pi 3. Our application will control an instrumental cluster (car dashboard) from a real BMW car, with sending custom packets to make it react (move gauges, etc.) on our actions.\r\nThis will be interesting for everyone who would like to create standalone devices based on Qt applications with hardware communication.","persons":[{"id":2950,"full_public_name":"Nazar Babik","first_name":"Nazar","last_name":"Babik"}],"links":[]},{"id":3002,"start":"13:55","duration":"00:25","room":"Room B07","slug":"next-generation-automotive-navigation-mapbox-gl-qtlocation","title":"Next Generation Automotive Navigation with Mapbox GL and QtLocation","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"Mapbox is a mapping platform that makes it easy to integrate location into any mobile and online application. Our open source project Mapbox GL native is a library for embedding interactive, customizable vector maps into native applications on multiple platforms using accelerated graphics provided by OpenGL.\r\nThanks to our cooperation with the Qt development team, we are pleased to bring Mapbox GL as a QML GeoService plugin in Qt 5.9 LTS release. For that we have integrated our code within QtLocation's third party libraries, meaning that the Qt 5.9 SDK should provide all necessary dependencies for building and running beautiful maps on mobile and embedded systems.\r\nTogether with QtLocation’s powerful API for easy integration of maps and directions, Mapbox GL goes an extra mile in terms of capabilities and features. You can use the default provided styles - or create your own - and apply runtime style changes as needed. Perspective view, live traffic information, satellite imagery and more.\r\nIn this presentation, we’ll talk about the plugin development efforts, with focus on the supported platforms, and then proceed to demonstrate the new and exciting features provided.","persons":[{"id":2957,"full_public_name":"Bruno de Oliveira Abinader","first_name":"Bruno de Oliveira","last_name":"Abinader"}],"links":[]},{"id":3003,"start":"11:30","duration":"00:50","room":"Room B07","slug":"qtivi-integrating-testing-vehicle-functions-qt-automotive-suite-1-2","title":"QtIVI: Integrating and Testing Vehicle Functions with Qt Automotive Suite","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"QtIVI has been part of the Qt Automotive Suite since its initial release. It facilitates the creation of Qt based interfaces for vehicle functions such as climate control, media services, etc.\r\n\r\nTaking native vehicle data APIs and bringing them into Qt is potentially cumbersome. Code has to be deriving from QObject, exposing properties, and mapping values and calls to the native APIs. Some vehicle data require custom data models and special handling of data updates. Often the real vehicle is not available for application developers so it is useful to build versions of the API that simulated the vehicle data. Finally, testing and profiling tools for native APIs are usually cumbersome and do not integrate with Qt nicely.\r\n\r\nThe Qt Automotive Suite QtIVI module introduced a number of patterns to handle these issues including a base classes for basic scenarios, switchable plugins to  selected between real or simulated backends, and tools in Gammaray to access and manipulate properties of objects at run time. While this was a big step forward, these still required work writing many objects and models, integrating the backend APIs and maintaining the required plugins.\r\n\r\nIn order to simplify this process further, Qt Automotive Suite 2.0, which will be launched at the end of the year, Introduces the IVIGenerator which is based on the QFace autogeneration framework. QFace is an open source framework where the vehicle interfaces are described in an IDL which supports familiar Qt constructs such as properties, operations, signals, models, etc. IVIGenerator then uses a template based code generator to produce code for the frontend Qt interface as well as for the backend.\r\n\r\nThe IDL supports additional concepts such as valid ranges, default values, etc. These are used in the simulator backend to support debugging. IVIGenerator can also generate backends to support unit testing based on the provided values.\r\n\r\nIn this talk we show how the code generator can be used to fully automate the generation of the frontend code while producing easily extendable stubbed backend code. We go on to show how the actual generation, by virtue of being templated, can be modified to include much of the back end integration code.","persons":[{"id":2958,"full_public_name":"Mike Krus","first_name":"Mike","last_name":"Krus"}],"links":[]},{"id":3004,"start":"16:00","duration":"00:25","room":"Room B07","slug":"complex-event-processing-electric-car-simple-way","title":"Complex Event Processing of An Electric Car In A Simple Way","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"In this talk we will present a unique dashboard for a prototype electric car that is used for displaying basic information such as motor functionalities, speed, charging visualization, as well as novel real-time data visualization for our embedded data stream processor with complex event processing capabilities. The dashboard is developed using Qt framework and graphics. Qt helps us with its simple and beautiful interfaces and back-end services.\r\nThis dashboard is more than a graphical interface, demonstrating the use of embedded complex event processing (CEP) engine as a new layer in dashboard systems. The complete system is also built and run on a raspberry pi with a light-weight Linux, which has been optimized for faster boot time and reliable operations. CEP engine provides the management of complex myriad data of an EV by executing the given rule sets and produces the higher level outputs. These rule sets can be remotely managed.\r\nReal-time EV data is retrieved via Canbus, processed by CEP, visualized by QT dashboard and published to the cloud environment. The ability to publish to cloud and event processing allows remote monitoring as well as immediate feedback thru the dashboard. The communication is two-way, event from cloud can also be reflected as feedback on the Qt dashboard. This life-cycle extends the mission of a car dashboard and makes the car part of a larger smart machine as well as possible remote administration.","persons":[{"id":2959,"full_public_name":"Müge Kural","first_name":"Müge","last_name":"Kural"}],"links":[]},{"id":3769,"start":"16:25","duration":"00:25","room":"Room B07","slug":"functional-safety-qt-qt-safe-renderer","title":"Functional Safety with Qt and Qt Safe Renderer","subtitle":"","tracks":["Automotive"],"track":"","type":"","language":"","abstract":"","description":"Qt is used in an extremely wide variety of use cases across multiple industries, including various safety critical systems. When a system, be it a medical device, a railway control system, or a car, can potentially cause harm to humans, functional safety helps in assessing the risk and taking the necessary measures to steer the risk to an acceptable level. This presentation briefly introduces the key concepts of functional safety and explains how to use Qt and the upcoming Qt Safe Renderer in a system certified for functional safety according to IEC 61508 and ISO 26262.","persons":[{"id":3767,"full_public_name":"Tuukka Turunen","first_name":"Tuukka","last_name":"Turunen"}],"links":[]}],"Room C01":[{"id":2977,"start":"13:55","duration":"00:25","room":"Room C01","slug":"restful-api-description-languages-overview-practice-usage-qt-applications","title":"RESTful API Description Languages: Overview and Practice of Usage in Qt Applications","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Public APIs are taking the world by the storm, with REST being a popular pattern for anything that faces the Web. Good public APIs usually have a formal definition that can be consumed by humans as well as computers, written in one of RESTful API Description Languages (ADLs). Unfortunately, when it comes to generating API stubs from an ADL, C++ turns out to be a second-class citizen. The talk will first browse over most used RESTful ADLs from a Qt client application developer's standpoint. Then the author will share his experience of dealing with an API for the Matrix collaboration platform that has a definition in Swagger/OpenAPI format; in particular, making a C++ code generator for OpenAPI. Finally, a question of OpenAPI and other ADLs usability in lower-level areas such as IoT will be raised and, with the help of the audience, hopefully answered.","persons":[{"id":2936,"full_public_name":"Alexey Rusakov","first_name":"Alexey","last_name":"Rusakov"}],"links":[]},{"id":2979,"start":"15:00","duration":"00:25","room":"Room C01","slug":"improve-productivity-clang-tools","title":"Improve your Productivity with Clang Tools","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Clang is a C/C++ compiler fronted which parses C++ source code. There is a lot of tools based on Clang that can assist you in writing or debugging C++ and Qt code. The first part of this talk will introduce you to existing tools such as the sanitizers, static analyzer, clang-tidy, and clazy. These tools help you to find bugs or refactor big code bases. We will have demo on how to use them and what are they good for. The second part will teach you how to extends these tools to work well with your own code bases. We will see how we can create a plugin that does certain checks to ensure the quality of your code and enforce some of the policies.","persons":[{"id":2938,"full_public_name":"Olivier Goffart","first_name":"Olivier","last_name":"Goffart"}],"links":[]},{"id":2982,"start":"11:30","duration":"00:25","room":"Room C01","slug":"qtbluetooth-mobile-devices-dragon-guide","title":"QtBluetooth on Mobile Devices - A Dragon Guide","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Connecting mobile phones to other gadgets and devices opens the door for a wide range of useful and innovative applications. Bluetooth as a well established technology seems like a natural choice for these applications. Still within our many projects we have encountered a wide range of problems and risks when using this technology. I will present the most common pitfalls and traps, tell how we avoided them, which tricks we used to work around them.","persons":[{"id":2942,"full_public_name":"Mathias Hasselmann","first_name":"Mathias","last_name":"Hasselmann"}],"links":[]},{"id":2987,"start":"11:55","duration":"00:25","room":"Room C01","slug":"no-limits-make-complicated-mobile-business-app","title":"No Limits: How to Make a More Complicated Mobile Business APP","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"There are many small example APPs available to help developing Qt APPs, but it's not always easy to bring it all together to develop real life APPs. This session is based on Ekkes experiences developing a mobile business APP from scratch for a german System House providing solutions for Care Services (outpatient and inpatient). This APP is very complex and covers:\r\n\r\n* Caching all the data for Clients, Services, Tour lists, Missions\r\n* Update cached data in a very performant way. This is important, because employees every morning must always load all relevant data to be able to work offline\r\n* REST services to GET and POST data (JSON payload)\r\n* Outpatient care services must work online and offline. Ekke implemented a intelligent Server Queue managing Online state, Login state and mobile APP lifecycle (suspended or active)\r\n* APP must run on different mobile OS (Android, iOS, W10 mobile) and devices of different sizes (small or big smartphones, tablets from 7\" to 18\", big screens)\r\n* APP can run on devices bound to employees or to teams, Team members can easy login using Bluetooth LE Waiterlock with magnetic keys (more details on BT LE in Ekkes session \"Bluetooth LE in mobile APPs: Tips and Tricks\")\r\n* Easy configuration of devices can be done with QR Codes HowTo make it all work together ?\r\n\r\nEkke will outline the navigation structure and data model to give a first overview. QtCreator is used as IDE to manage all aspects of a mobile APP. He will show HowTo structure a project with many C++ classes, a huge number of QML files and many assets for different platforms. QtQuickControls2 enable you to make complicated business APPs for mobile easy without limits in a short timeframe. Ekke will demo the APP and explain how all is done.\r\n\r\nEkke is using a data model based on QObject* cached as JSON files. Loader, Repeater, Components, QTimer are used to create a high performant dynamic APP. Customized QtQuickControls2 are used to provide a great UX. (Here more about this APP from Roland Wienen's session \"Success with mobile first in a real business cas\" as part of the Business Track)\r\n\r\nYou have built your mobile APPs with QtQuick or Widgets? You never tried QtQuickControls2 for mobile APPs? This session gives you the reason why you immediately should start with and procides many tips, tricks, recipes to make your first steps easier.","persons":[{"id":2946,"full_public_name":"Ekkehard Gentz","first_name":"Ekkehard","last_name":"Gentz"}],"links":[]},{"id":3016,"start":"16:25","duration":"00:25","room":"Room C01","slug":"take-walk-pyside","title":"Take a Walk on the PySide","subtitle":"","tracks":[],"track":"","type":"","language":"","abstract":"","description":"The PySide2 project (http://wiki.qt.io/PySide2) provides Python language bindings to the Qt library, allowing to utilize the power of Qt without having to compile code. It is a port of Qt 4's PySide project and will become a first class citizen in Qt 5, being developed by a small team at the Qt Company's Berlin office.\r\nAn overview of the project will be given and a short example will be created doing live coding, apart from showing various demos.","persons":[{"id":2968,"full_public_name":"Friedemann Kleint","first_name":"Friedemann","last_name":"Kleint"}],"links":[]},{"id":3567,"start":"13:30","duration":"00:25","room":"Room C01","slug":"android-ios-put-app-diet","title":"Android & iOS - Put Your App on a Diet","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"Every megabyte counts. In this talk Maciej will present few ideas about making an Android / iOS app weight less, especially focusing on image resources. 100MB limit can be easy reached when app is full of rich graphics and other media, not to mention Qt itself on board. How to deal when such a scenario happens? Each platform has it's own ways to deal with this problem (Android apk split, Apple App Slicing for example) and they can be achieved also using Qt, what will be shown on examples during talk.","persons":[{"id":3566,"full_public_name":"Maciej Węglarczyk","first_name":"Maciej","last_name":"Węglarczyk"}],"links":[]},{"id":3570,"start":"15:25","duration":"00:25","room":"Room C01","slug":"cute-app-deserves-clean-architecture","title":"A Cute App Deserves a Clean Architecture","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"If you ask about application architecture best practices in the Qt community, one of the first pieces of advice you'll get is probably: \"do your logic in C++ and your GUI in qml\". That is, at least a two-layer architecture is suggested. Fresh developers regard this as sufficient advice and dive straight into the code.\r\n\r\nThe answer is however certainly not sufficient, and indeed not very helpful for two reasons:\r\n\r\n1) it implies a strong coupling between programming language and layer purpose (logic <-> C++, GUI <-> qml),\r\n2) \"logic\" can mean anything really. The problem is, even if you buy this answer and dig deeper by asking \"so, how should I structure my logic?\", you'll most likely get an \"It depends.\".\r\n\r\nSure thing, it depends, but there must be some principles of application architecture that should be applicable no matter what, or at least across many scenarios. There must be a more helpful answer. MVC, MVVM, MVP, Flux, are such possible answers. The Clean Architecture (Robert C. Martin) is another answer. It promotes separation of concerns by defining in a specific way what main layers constitute the application logic, and what additional layers deal with. It tries to be more concerned about business entities than standardised system components. It promises to be independent of frameworks, testable, independent of UI, independent of database, and independent of any external agency.\r\n\r\nThis talk will show a way of implementing the Clean Architecture for Qt applications. While the architecture itself is independent of frameworks, space will be given to Qt-specific features that make life a bit easier to help you put the theory into practice and try it for your next project. Among other things, you'll see a way of implementing Behaviour Driven Development in Qt by modelling use cases in the code, a way of structuring your projects by making the app's functionality stand out from file names, and much more. You'll see if the suggested approach can work for you too.\r\n\r\nThe talk will likely be interesting to both Qt newcomers, developers who are looking for alternative architectural approaches for their apps, and, in part, to managers who want to find better ways to communicate with their dev team. A basic operating knowledge about common Qt modules and C++ is suggested but not required.","persons":[{"id":3569,"full_public_name":"Marco Piccolino","first_name":"Marco","last_name":"Piccolino"}],"links":[]},{"id":3572,"start":"16:00","duration":"00:25","room":"Room C01","slug":"qt-pre-user-unified-user-experience","title":"Qt, the Pre-User, and the Unified User Experience","subtitle":"","tracks":["App Dev"],"track":"","type":"","language":"","abstract":"","description":"On the one hand, mobile devices in the form of smart phones and tablets in addition to thin, modern-generation laptops and wearables are increasingly making their way into the business world and changing the way we work.\r\n\r\nOn the other hand, the companies producing those devices and their respective software stacks create their own silos, with their own tool chains and their own ideas of how the user should interact with those devices. And then along comes Qt!\r\n\r\nA common user experience, making use of unique features of each type of device where necessary, is now possible, regardless of who made the device. Just what the world of BYOD (bring your own device) needs. However, getting there is not easy.\r\n\r\nThis talk takes a look at mobile systems on the basis of iOS and Android, and on Windows-based systems, focusing on an adaptive approach to designing and to building applications and managing their data, using a language instruction system as an example.","persons":[{"id":3571,"full_public_name":"Jeffrey Brendecke","first_name":"Jeffrey","last_name":"Brendecke"}],"links":[]},{"id":3705,"start":"10:35","duration":"00:40","room":"Room C01","slug":"current-state-future-qt","title":"The Current State and Future of Qt","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Lars Knoll, Chief Maintainer of Qt and the CTO of The Qt Company discusses the current state of Qt and the foreseeable future development. What is coming in the next releases and what are the big trends in Qt.","persons":[{"id":3702,"full_public_name":"Lars Knoll","first_name":"Lars","last_name":"Knoll"}],"links":[]},{"id":3708,"start":"09:15","duration":"00:40","room":"Room C01","slug":"trends-software-business","title":"Trends in Software and Business","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Igor will blast your morning to a start by examining the important trends in software and business.\r\n\r\nMore information to follow shortly!","persons":[{"id":3512,"full_public_name":"Igor Beuker","first_name":"Igor","last_name":"Beuker"}],"links":[]},{"id":3709,"start":"09:55","duration":"00:40","room":"Room C01","slug":"modern-c","title":"Modern C++","subtitle":"","tracks":["Keynote"],"track":"","type":"","language":"","abstract":"","description":"Leading C++ authority and chair of the ISO C++ standards commitee, Herb Sutter, will talk about recent and relevant topics in the C++ world.\r\n\r\nMore information to follow shortly!","persons":[{"id":3020,"full_public_name":"Herb Sutter","first_name":"Herb","last_name":"Sutter"}],"links":[]}],"Room A05":[{"id":2985,"start":"13:55","duration":"00:25","room":"Room A05","slug":"building-human-machine-interface-medical-iot","title":"Building a Human Machine Interface for the medical IoT","subtitle":"","tracks":["Medical"],"track":"","type":"","language":"","abstract":"","description":"Healthcare is held back by lack of access to quality clinical data. Access to quality clinical data is difficult due to lack of interoperability between medical devices. Periodic EMR documentation is not adequate for fueling research, Artificial Intelligence (AI), or Machine Learning (ML). The ASTM F2761 standard describes the Integrated Clinical Environment (ICE), an infrastructure for supporting interoperability between medical devices and user access facilitated through apps. Building on the ICE architecture, DocBox has created a platform that enables the development and use of clinical apps. These clinical apps support advances in operational and clinical automation, and improvements in patient safety.\r\n\r\nDocBox has chosen Qt as the application framework to build the bedside touchscreen HMI (Human Machine Interface), and clinical apps built on the platform. We wanted to create an HMI with a modern, intuitive UI. Qt Quick allows us to rapidly build apps made up of re-usable UI components, while taking advantage of gestures unique to a touch screen interface.\r\n\r\nThis talk will demonstrate how we’ve repurposed the Qt Application Manager from the Automotive Suite. The DocBox at the patient’s bedside can install different apps suited to the task at hand. This enables the DocBox to scale to a large number of use cases in a clinical context, a general purpose device for clinician use.\r\n\r\nThis talk will also demonstrate how we’ve leveraged components like Qt Charts and the Qt Virtual Keyboard to create a clinical app. Data from connected medical devices is automatically added to a patient’s flowsheet, and the remainder completed with manual entry using the Qt Virtual Keyboard. We have heavily customized the Qt Virtual Keyboard to allow convenient entry of measurements. Qt Charts is leveraged to graphically display an 18 hour history of patient data in a line chart, as well as system events. User interaction is possible through tapping specific events to reveal detailed information, and pinch / swipe gestures to explore patient data on a time series. Behind these clinical applications is DICES, a patient-centric data model. Leveraging DDS (Data Distribution Service), data from connected medical devices, hospital information systems, and apps we maintain a living model of all information pertinent to the patient’s care. DDS is a data-centric, publish / subscribe, powerful middleware for the Industrial Internet of Things. Use cases extend beyond patient care, and into the realms of operations and logistics, such as easy inventory management of medical devices.\r\n\r\nThis talk will demonstrate how we’ve integrated RTI DDS Connext into our apps. Looking to the future, apps will be built to assist the clinician in caring for patients, making intelligent decisions, and documenting their progress. The data is what’s important; how to discern quality data, how to surface and present it to the user. The DocBox ICE platform, powered by the Qt Application framework, will enable data driven healthcare.","persons":[{"id":2947,"full_public_name":"Jereme Givens-Lamothe","first_name":"Jereme","last_name":"Givens-Lamothe"}],"links":[]},{"id":3690,"start":"16:00","duration":"00:50","room":"Room A05","slug":"integrating-opengl-qt-quick-2-applications","title":"Integrating OpenGL with Qt Quick 2 applications","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"One of the foundation pillars of Qt Quick 2 is its OpenGL-based rendering pipeline. By leveraging the GPU capabilities, we get 60 frames-per-second animated scenes, real time eye candy and special effects, particles, and so on. Moreover, the main programming language is QML, which is extremely popular amongst developers and designers -- it allows them to quickly prototype and build user interfaces. For these reasons, Qt Quick is becoming the de-facto choice on mobile and embedded platforms. However, can we integrate Qt Quick 2 with an existing OpenGL codebase? Would it be possible to reuse old, working, tested OpenGL code and give it a new look and feel by building a Qt Quick interface that uses it? How far can we go with that integration?\r\n\r\nIn this talk, I will show the technologies available in Qt 5.6 that allow deep integration of Qt Quick 2 scenes with custom drawn OpenGL content. We will discuss the possibility of simply providing a Qt Quick overlay for an OpenGL scene. The discussion will then proceed to the creation of custom Qt Quick Items drawn using raw OpenGL commands, which can then be used from QML.\r\n\r\nFinally, I will illustrate how to manually drive Qt Quick's own rendering if we need to be in complete control of how and when the rendering happens. The audience is expected to have familiarity with basic QtQuick and OpenGL concepts, but no in-depth knowledge of them is required.","persons":[{"id":2965,"full_public_name":"Giuseppe D'Angelo","first_name":"Giuseppe","last_name":"D'Angelo"}],"links":[]},{"id":3786,"start":"11:30","duration":"00:50","room":"Room A05","slug":"present-future-qt-medical-industry","title":"The Present and Future of Qt in the Medical Industry","subtitle":"","tracks":["Medical"],"track":"","type":"","language":"","abstract":"","description":"The medical device industry is in a constant state of evolution these days.  New innovation and new technology give rise to new industry requirements and new standards, creating more challenges for medical device developers.  Learn how Qt is attacking these challenges with our customers and positioning themselves to be the premier solution of its kind in the medical industry.","persons":[{"id":3787,"full_public_name":"Roger Mazzella","first_name":"Roger","last_name":"Mazzella"}],"links":[]},{"id":3825,"start":"13:30","duration":"00:25","room":"Room A05","slug":"communicating-thoughts-unlocking-locked","title":"Communicating with Thoughts: Unlocking the Locked-in","subtitle":"","tracks":["Medical"],"track":"","type":"","language":"","abstract":"","description":"People that suffer from complete paralysis have nothing left to interact with their environment – except for their thoughts. Today, assistive systems that interpret thoughts by measuring brain activity are expensive and difficult to set up, which makes them inaccessible for the people that need them the most.\r\n\r\nOur goal is to design a distributed brain-computer interface (BCI) that is affordable, easy to use for paralysed people and their caregivers, easy to control for researchers, and that integrates well with existing assistive technologies at home. Our platform will increase the life quality of the people in need and break with the limitations of expensive neuroscientific research.","persons":[{"id":3823,"full_public_name":"Matthias Hohmann","first_name":"Matthias","last_name":"Hohmann"}],"links":[]},{"id":3886,"start":"15:00","duration":"00:25","room":"Room A05","slug":"technical-overview-of-qt-in-medical-devices","title":"Technical Overview of Qt in Medical Devices","subtitle":"","tracks":["Medical"],"track":"","type":"","language":"","abstract":"","description":"An overview of Qt features that facilitate the development of UX and UI in medical devices. Review of UI modules like QtWidgets and Qt Quick as well as the new functionalities introduced in the latest Qt releases such as the addition of the Qt Safe render module and Qt Lite.  We will go through some use cases and how Qt impacted the overall development of the solutions and how it shortens the time to market.","persons":[{"id":3696,"full_public_name":"Ionut Alexandrescu","first_name":"Ionut","last_name":"Alexandrescu"}],"links":[]},{"id":3889,"start":"15:25","duration":"00:25","room":"Room A05","slug":"evolution-lgpl-license-agreement-review-new-lgpl-v-3","title":"The Evolution of the LGPL License Agreement — A Review of the New LGPL V.3","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"","persons":[{"id":3887,"full_public_name":"Paul Criswell","first_name":"Paul","last_name":"Criswell"}],"links":[]}],"Room A08":[{"id":2989,"start":"16:00","duration":"00:25","room":"Room A08","slug":"integrating-process-graphical-content-qtquick-scene","title":"Integrating out of Process Graphical Content into a QtQuick Scene","subtitle":"","tracks":[],"track":"","type":"","language":"","abstract":"","description":"When rendering expensive content, such as a car navigation view, inside a bigger UI it may be useful to split it in a separate process to avoid blocking the main application, achieving also better isolation and stability. The resulting content from the helper process needs to be then composited into the main application scene to be integrated with the other elements of the UI. If the helper renders using OpenGL however we don't have a ready access to the pixels, and the naive approach of transferring them to CPU memory and sending them is very slow and not viable most of the times. This talk will present what are the approaches to achieve a fast, 0-copy transfer of the content from the helper process to the main one, using technologies such as Wayland and EGLStream, and how to integrate it in the QtQuick scene.","persons":[{"id":2949,"full_public_name":"Giulio Camuffo","first_name":"Giulio","last_name":"Camuffo"}],"links":[]},{"id":2991,"start":"11:30","duration":"00:50","room":"Room A08","slug":"qobject-deep-dive","title":"QObject Deep Dive","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"At the heart of Qt is the QObject and the technologies that drive this. As Qt developers we love to use signals and slots, the events, the introspection and all those other features. But how do those actually work? Surprisingly few Qt developers truly understand how the QObject systems work. And by not understanding, they fail to grasp the full potential of what this can help you with.\r\n\r\nIn this talk, we will dive very deep into the belly of the beast and discuss how it actually works. You will see what moc does, how it's related to QObject and why it's necessary. You will learn all there is to learn about what QObject does for your objects. We will also look at the Qt event loop and see how this is related to QObject and the Qt signals. This is necessary to understand what happens to your Qt signals. And finally, we will have a discussion about how this should modify the architecture of your code, how you should modify the way you think code to best make use of Qt. The full use of Qt allows you to code self contained components - getting away from the dreaded spaghetti code.\r\n\r\nThe aim of this talk is to give the developer the necessary background knowledge to make the right decisions about Qt based designs in the code.\r\n\r\n&nbsp;","persons":[{"id":2951,"full_public_name":"Bo Thorsen","first_name":"Bo","last_name":"Thorsen"}],"links":[]},{"id":3001,"start":"15:00","duration":"00:50","room":"Room A08","slug":"qbs-build-systems-state-union","title":"Qbs – Build Systems State of the Union","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"The build system is one of the most important aspects of a streamlined software development pipeline. A build tool is something that developers use throughout the day, every day, and should be lightning fast, easy to use, and produce instantaneous and correct incremental builds. Build systems that are slow, hard to maintain, or underspecify dependencies (leading to broken or malfunctioning builds) significantly impact your team’s workflow and waste countless hours of time.\r\nQbs aims to be the perfect high level cross platform build system — and intended replacement for qmake within Qt. It started as a research project at Nokia in 2010 and has been ongoing since, with the initial Qt port planned for completion this year in 2017. Qbs aims to support any toolkit, any language, and any OS, with excellent support for cross compilation, IDE integration, embedded device deployment & packaging, speed, flexibility, expressiveness, and ease of use.\r\nThis talk is a continuation of \"Qbs – the Next Generation of Build Automation\" from Qt World Summit 2016 in San Francisco. It provides an introduction to Qbs and how it compares to other build systems like CMake and qmake. It will cover the general design of Qbs, illustrate the power of its dependency management system, and show off some of its unique features like ABI-based linking optimization, building for multiple platforms in parallel, and library-based design.\r\nWe will also cover some of the powerful new features added over the past year, such as multiplexing and parameterized dependencies, as well as some examples and performance benchmarks comparing Qbs to the competition. The talk will also briefly touch on the progress made and lessons learned porting Qt to use Qbs as its build system.","persons":[{"id":2956,"full_public_name":"Jake Petroules","first_name":"Jake","last_name":"Petroules"}],"links":[]},{"id":3009,"start":"13:30","duration":"00:50","room":"Room A08","slug":"qtlocation-5-9-tilted-maps-pluggable-engines","title":"QtLocation 5.9: from Tilted Maps to Pluggable Engines","subtitle":"","tracks":["Technical Deep Dive"],"track":"","type":"","language":"","abstract":"","description":"With Qt5.9, the Qt Location module has received numerous new features, some of which have finally disrupted the internal limitations the module used to have.\r\nThanks to this, the module can now make use of 3rd party, pluggable map engines for displaying the maps and the user-added content on the maps. The module now also allows tilting and rotating maps. Many other features have been also introduced, still maintaining source and binary compatibility as always.\r\nIn this talk you will learn what features are now available in QtLocation 5.9, how to use them, and what new scenarios they enable.","persons":[{"id":2961,"full_public_name":"Paolo Angelelli","first_name":"Paolo","last_name":"Angelelli"}],"links":[]},{"id":3760,"start":"16:25","duration":"00:25","room":"Room A08","slug":"qt-wayland-compositor-creating-multi-process-user-interface","title":"Qt Wayland Compositor: Creating Your Own Multi-Process User Interface","subtitle":"","tracks":["Embedded"],"track":"","type":"","language":"","abstract":"","description":"As the complexity and requirements of user interfaces grow, it becomes natural to split the UI into several processes. Doing so can improve stability, security, and enable 3rd party application development.\r\n\r\nQt has made the decision to use Wayland for this purpose. With Qt Wayland Compositor you can write your own Wayland compositor, making it possible to create custom user interfaces for multi-process embedded applications.\r\n\r\nThis talk gives an in-depth presentation of the Qt Wayland Compositor API, showing you how to create a custom Wayland compositor. We will start from scratch and create our own user interface with animations, bells and whistles.","persons":[{"id":3759,"full_public_name":"Johan Helsing","first_name":"Johan","last_name":"Helsing"}],"links":[]}],"Room B05":[{"id":2997,"start":"13:30","duration":"00:50","room":"Room B05","slug":"breathing-life-applications-animation-qt-3d","title":"Breathing Life into Your Applications: Animation with Qt 3D","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"For a long time it has been possible to add some level of animation to your Qt applications by way of QPropertyAnimation, and then more recently with the Qt Quick Animation framework. You could even use these along with the object types within Qt 3D to animate your virtual worlds. However, we can go further both in terms of features and performance.\r\nQt has traditionally targeted developers. However, we see increasing demand for it to adapt and to also support the needs of content creators and artists. Animation is a prime example of this. It is no longer feasible to provide only support for creating animations programmatically. Artists want to be able to use their own familiar tools such as Blender or Maya to author animations and then be able to export them for consumption by applications. This meant adding support for key frame animations – something developers have also been asking for over the years. Qt 3D now offers the ability to consume key frame animations exported from external tools or to create your own key frame animations in code. In addition Qt 3D offers a collection of types to make it convenient to work with such animation data. In this talk we will take a deep dive into the new animation subsystem of Qt 3D.\r\n\r\nWe will cover:\r\n\r\n• How to create key frame animation data with tools or code.\r\n• How to play back the animation data and apply it to your own objects.\r\n• Skeletal animations.\r\n• Using Animation blend trees to combine animations.\r\n• Controlling time with animation clocks.\r\n• Orchestrating the transitions between animations.\r\n• Morph target animations.\r\n\r\nIn addition to seeing the new features of the animation framework, we will also take a behind the scenes look at how Qt 3D evaluates the animations. Qt 3D has a scalable architecture allowing for good performance whilst leaving the main thread free for your application logic. We will see how properties are updated on both the frontend and backend of Qt 3D allowing the other parts of your application to see the updates.","persons":[{"id":2954,"full_public_name":"Dr Sean Harmer","first_name":"Dr Sean","last_name":"Harmer"}],"links":[]},{"id":3006,"start":"16:00","duration":"00:50","room":"Room B05","slug":"interacting-3d-content","title":"Interacting with 3D Content","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"Qt 3D 2.0 has greatly facilitated adding 3D content to modern 2D and 3D applications, providing a robust and versatile toolkit for displaying custom domain data using complex rendering techniques. One of the key aspect of successful visualisation is making it easy to interact with the data. In this talk, we will review the various methods available to the developer and how to implement them with Qt 3D.\r\n\r\nWe will start with simple picking, or the ability to query which object is currently under the mouse pointer. We will also see how to handle low level device events (mouse, keyboards, other controllers) to give behaviour to objects. When using the QML API, this is done in a truly declarative manner which is easy to apprehend and implement.\r\n\r\nIntegrating 2D and 3D UIs has traditionally been very cumbersome. But using Qt 3D’s QML API, Qt Quick can easily be used to create traditional 2D user interfaces to manipulate the properties of rendered objects and control the scene. Furthermore, Qt 3D 5.9 introduces, as a tech preview, the ability to embed such Qt Quick 2D UIs directly in the 3D scenes while preserving a seamless interactivity.\r\n\r\nMoving and resizing objects in 3D while interacting on a 2D screen can be difficult. We will show how embedding special controls in the scene can be used to facilitate the editing of 3D objects, just like sliders and dials provide useful helpers in the 2D case. Referred to a manipulators, with limited and predictable degrees of freedom, such controls can be very helpful for facilitation such interactions.","persons":[{"id":2958,"full_public_name":"Mike Krus","first_name":"Mike","last_name":"Krus"}],"links":[]},{"id":3683,"start":"11:30","duration":"00:50","room":"Room B05","slug":"modern-graphics-apis-qt-vulkan-friends","title":"Modern Graphics APIs in Qt: Vulkan and Friends","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"With the release of version 5.8, Qt's increasing focus on modern graphics APIs other than OpenGL became apparent. However, due to the wide scope and range of graphics-related Qt modules and subsystems, questions like \"Does Qt support graphics API N?\" often cause confusion and can lead to misunderstandings. For example, Qt 5.10 will have support for OpenVG, Direct3D 12, and Vulkan in addition to OpenGL, but only for certain components of the framework. Therefore, in this talk we are going to take a look at graphics API usage in Qt in general, including some recently introduced, less well-known interop enablers that bridge the 3D and 2D worlds.\r\n\r\nWe believe that such an overview can provide valuable input not just to developers, but also to those more on the management side of things, since it can help avoiding potential traps when planning, setting up and architecting new projects.\r\n\r\nLast but not least, a hands on introduction will be given to one of Qt 5.10's big new features: the cross-platform Vulkan enablers that allow integrating Vulkan rendering into certain Qt applications on Windows, Linux and Android.","persons":[{"id":3560,"full_public_name":"Laszlo Agocs","first_name":"Laszlo","last_name":"Agocs"}],"links":[]},{"id":3684,"start":"15:00","duration":"00:50","room":"Room B05","slug":"creating-user-interfaces-virtual-reality-qt","title":"Creating User Interfaces for Virtual Reality with Qt","subtitle":"","tracks":["Graphics and 3D"],"track":"","type":"","language":"","abstract":"","description":"Qt applications are usually designed to be displayed as 2D surfaces on a traditional display. Sometimes these 2D surface are combined with 3D scenes, as is the case with 3D editors and tools for instance. With Virtual Reality and Augmented Reality becoming more widespread, the traditional setup gets reversed: the question now is rather how Qt can be used to display a user interface inside a 3D Virtual Reality scene?\r\n\r\nThis talk aims to explore what it takes to create User Interfaces with Qt for Virtual Reality. What are the challenges we face that are unique to Virtual Reality user interfaces? Performance is critical in Virtual Reality rendering, because poor performance means latency which means poor user experience (Motion Sickness is a terrible experience, period). We will discuss ways to overcome this and other challenges. What tools are available in Qt now to create Virtual Reality user interfaces? Qt Quick is an excellent way to create modern user interfaces, and this is just as true in VR applications.\r\n\r\nWe will demonstrate how it is possible to integrate Qt Quick user interfaces into VR applications. What can we do in future to make Qt the ideal toolkit for creating user interfaces for Augmented Reality and Virtual Reality? Now that we are planning for Qt 6, it is worth exploring how we can improve Qt in the context of VR and AR use cases, and how Qt's 3D frameworks and tools can be used to create the 3D user interfaces of the future.","persons":[{"id":3558,"full_public_name":"Andy Nichols","first_name":"Andy","last_name":"Nichols"}],"links":[]}],"Room B09":[{"id":3011,"start":"13:30","duration":"00:50","room":"Room B09","slug":"applying-spatial-analytics-unlock-power-data","title":"Applying Spatial Analytics to Unlock the Power of your Data","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"Data is the key ingredient for powering any successful business. Applying geospatial analytics to your business’s data brings greater, more “actionable” value to any business data process. There’s a geographic science to it. This is the Science of ‘Where’. Qt developers in any industry have C++ and QML APIs available to them for integrating the power of spatial analytics and the science of ‘Where’ into advanced data computing systems built on the Qt platform, in any format.\r\n\r\nThis session will talk about how to apply some of the more common spatial analysis tools and techniques for solutions in any industry or domain. Demonstrations and examples will be in the context of real world scenarios where data analysis is used to support real business decisions. These tools and techniques can be applied at any geographic scale, work in both visual and non-visual contexts (with or without a map), in both 2D and 3D views, on any device or form factor, and in both connected and disconnected environments.","persons":[{"id":2963,"full_public_name":"Eric Bader","first_name":"Eric","last_name":"Bader"}],"links":[]},{"id":3018,"start":"15:00","duration":"00:50","room":"Room B09","slug":"cut-development-time-cost-qt-qml","title":"How to Cut Down Development Time and Cost with Qt and QML?","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"First, a short demo of a quite complex app from the automotive/industrial field, developped by a single person in a very short time-span, followed by the details about the various technics that were used to achieve this performance :\r\n* Well-designed architecture (\"Use Data-Oriented Programming when using QML\"). There are a few basic rules that can prevent bad architecture decisions, and make the application codebase very easy/pleasant to work with, to fix it or make it evolve. Learn how to choose the right option at first try, without headaches !\r\n* Well-thought helpers classes, macros, and templates (\"That good-old Don't Repeat Yourself thing, but one step farther\"). While the statement \"less code we have, better it is\" is not totally true, there are non-negligible benefits we can take from keeping the code base small and comprehensive. Discover where the biggest part of this \"avoidable code\" stands, and how to eliminate it !\r\n* Well-structured config files (\"Use QML for much more than just UI\"). The QML langage is immensly powerful and handy when creating appealing UI and animations, with QtQuick or Qt3D. But do you know that the langage itself and its engine make a very flexible configuration / extension system, that comes with nearly zero-cost, given your app already uses QtQuick ? Come and see what non-graphical QML can do for you!\r\nThis speak will showcase the huge potential of Qt & QML when it comes to future-proof software development, with cut-down time to market. It can be equally useful and informative for developpers (no matter if they are new to Qt and/or QML, or if they used it for long time) and for deciders (to take the measure of the nice things they can create with constrained team and means).","persons":[{"id":2970,"full_public_name":"Thomas Boutroue","first_name":"Thomas","last_name":"Boutroue"}],"links":[]},{"id":3574,"start":"11:30","duration":"00:25","room":"Room B09","slug":"qt-vs-web-total-cost-ownership","title":"Qt vs. Web - Total Cost of Ownership","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"In every development project, a company must make a choice which development framework they are going to use. This is a very important decision, considering that software life spans can be 20 years or more. This is a long-term commitment, which can have a large impact on the overall cost of the project. Some of the costs can be attributed to the software development kit (sdk) itself, such as license fees. Others increase the project cost in other ways, such as the cost of compatible hardware required to achieve a desired level of user experience. The aim of this presentation is to compare Qt with HTML5 in terms of hardware costs and user experience.\r\n\r\nWe will take the examples of Netflix and Facebook to illustrate how inappropriate use of HTML can be detrimental to user experience and cause million-dollar losses. The required hardware to achieve the desired user experience on a Linux platform will be derived as 4-core Cortex-A9 for an application made with AngularJS and Blink and a single-core Cortex-A8 made with Qt QML. The cost for hardware will be calculated for different volumes of production and reveal that using Qt can lead to hardware cost savings of up to 45%.\r\n\r\nLicensing costs tend to have a relatively low impact on the total cost of ownership, relative to potential savings in hardware, reduced development time, faster time-to-market and better performance, even at low production volumes.","persons":[{"id":3573,"full_public_name":"Burkhard Stubert","first_name":"Burkhard","last_name":"Stubert"}],"links":[]},{"id":3695,"start":"16:00","duration":"00:50","room":"Room B09","slug":"interactive-digital-home-software-developed-using-qt-libraries","title":"An Interactive Digital Out-of-Home Software Developed by Using Qt Libraries","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"An Interactive Digital Out-of-home (DOOH) software has some specific requirements such as astonishing real time visual effects, multiple cameras and touch devices support, remote monitoring and control, over the air deployment, statistics and the ability to easily create eye catching apps for a variety of marketing campaigns. As performance and stability are crucial, watchdog services as well as automatic unit and integration tests should be established. In order to create user friendly interfaces, to write exhaustive testing, establish network communication or simply to show an image or to play a video, Qt has helped to minimize the development time and to improve the overall performance in all aspects of the software development life cycle. This presentation will explore the different features of the interactive DOOH software and underline the integration of the Qt libraries within the software.","persons":[{"id":3696,"full_public_name":"Ionut Alexandrescu","first_name":"Ionut","last_name":"Alexandrescu"}],"links":[]},{"id":3773,"start":"11:55","duration":"00:25","room":"Room B09","slug":"leveraging-system-modules-development-hmi-m2m-solutions-electric-supercars","title":"Leveraging System-on-Modules in the Development of HMI and M2M Solutions for Electric Supercars","subtitle":"","tracks":["Business"],"track":"","type":"","language":"","abstract":"","description":"In this talk, we will demonstrate how the use of a powerfull and feature-rich System-on-Module (SoM) allows you to quickly scale and adapt to ever-changing requirements of your industry. A use-case will be presented by Rimac, the manufacturer of the world's fastest electric supercar.\r\n\r\nWe will explain how the Embedded Linux OS (Boot2Qt) provided by Toradex and Qt is leveraged to create two flagship products of the Rimac Automobili software development department: our M2M and HMI solution.\r\n\r\nBy buliding on top of the Apalis iMX6 SoM based on the NXP i.MX 6 SoC, and the Boot2Qt software stack for NXP i.MX 6, we have managed to create a family of HW and SW solutions tailored to various applications in the automotive sector. The applications include monitoring and transfering data in near-realtime from the vehicle to the engineers at the factory, presenting vehicle data to the driver through a smartphone, remote control of the vehicle via Internet, developing exciting and feature-rich instrument-clusters and IVI screens and overall achieving a fully customisable and connected car.","persons":[{"id":3772,"full_public_name":"Stefan Schürger","first_name":"Stefan","last_name":"Schürger"},{"id":3771,"full_public_name":"Tomislav Lugarić","first_name":"Tomislav","last_name":"Lugarić"}],"links":[]}]}}},"timeslot_duration":""}}